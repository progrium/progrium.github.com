<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Jeff Lindsay</title>
 <link href="http://progrium.com/atom.xml" rel="self"/>
 <link href="http://progrium.com"/>
 <updated>2013-11-13T11:14:14-08:00</updated>
 <id>http://progrium.com</id>
 <author>
   <name>Jeff Lindsay</name>
   <email>progrium@gmail.com</email>
 </author>

 
 <entry>
   <title>Viewdocs: Hosted Markdown project documentation (finally!)</title>
   <link href="http://progrium.com/blog/2013/11/13/viewdocs-hosted-markdown-project-documentation"/>
   <updated>2013-11-13T00:00:00-08:00</updated>
   <id>http://progrium.com/blog/2013/11/13/viewdocs-hosted-markdown-project-documentation</id>
   <content type="html">&lt;p&gt;A huge part of the user experience for open source software is the documentation. When writing new software to be adopted, I&amp;#8217;ve learned it&amp;#8217;s more important to first write decent docs than tests. And when I forget, &lt;a href='https://github.com/kennethreitz'&gt;Kenneth Reitz&lt;/a&gt; is there to remind me.&lt;/p&gt;

&lt;p&gt;When I&amp;#8217;ve outgrown a README on Github, I only consider two options for providing documentation: &lt;a href='http://pages.github.com/'&gt;Github Pages&lt;/a&gt; and &lt;a href='https://readthedocs.org/'&gt;Read the Docs&lt;/a&gt;. Unfortunately, I have problems with both of them. Chiefly, Read the Docs makes me use reStructured Text, and Github Pages means maintaining a separate orphan branch and using a static page generator.&lt;/p&gt;

&lt;p&gt;What I&amp;#8217;ve really wanted is something like &lt;a href='http://gist.io/'&gt;Gist.io&lt;/a&gt;, but for my repository. Nobody has stepped up, so I built it.&lt;/p&gt;

&lt;p&gt;I call it &lt;a href='http://progrium.viewdocs.io/viewdocs'&gt;Viewdocs&lt;/a&gt;. It renders static pages on-demand from Markdown in your project&amp;#8217;s docs directory. There&amp;#8217;s no setup, just follow the conventions and it works. It may even already be working for you, since Markdown in a docs directory is not that uncommon. And keeping your documentation in the same branch as your code means it&amp;#8217;s easier for people to contribute docs with their pull requests.&lt;/p&gt;

&lt;p&gt;The default layout is borrowed from Gist.io, giving you a clean, elegant documentation site. All you have to do is write some Markdown. That&amp;#8217;s about all there is to it.&lt;/p&gt;

&lt;p&gt;You can read more on the &lt;a href='http://progrium.viewdocs.io/viewdocs'&gt;homepage for Viewdocs&lt;/a&gt;, which is powered by Viewdocs. Or here&amp;#8217;s a quick video introduction:&lt;/p&gt;
&lt;iframe allowFullScreen='allowFullScreen' frameborder='0' height='394' mozallowfullscreen='mozallowfullscreen' src='http://player.vimeo.com/video/79066808' webkitAllowFullScreen='webkitAllowFullScreen' width='700'&gt;No iFrames?&lt;/iframe&gt;</content>
 </entry>
 
 <entry>
   <title>Hacker Dojo: Community Trading Zone</title>
   <link href="http://progrium.com/blog/2013/08/18/hacker-dojo-community-trading-zone"/>
   <updated>2013-08-18T00:00:00-07:00</updated>
   <id>http://progrium.com/blog/2013/08/18/hacker-dojo-community-trading-zone</id>
   <content type="html">&lt;p&gt;I recently came out of a Hacker Dojo board meeting, as I do every month, but this time with a renewed sense of excitement for Hacker Dojo. We began with the usual board meeting stuff &amp;#8212; finances, staff benefits, etc &amp;#8212; but there was one final item to discuss that&amp;#8217;s more in tune with the reason I&amp;#8217;m even on the board. There has been an increasingly pressing issue around what Hacker Dojo is. We used to know what it was and had a reasonable idea of what we always wanted it to be, but we&amp;#8217;ve grown, we&amp;#8217;ve learned, and our model has to adapt. This discussion led to a rethinking of the conceptual structure of Hacker Dojo.&lt;/p&gt;

&lt;p&gt;One of the reasons this came up is growth. We&amp;#8217;ve had consistent membership growth with only a couple expected downturns, due to various setbacks. For example, when we were temporarily limited to a maximum occupancy of 49 people, membership dropped because people couldn&amp;#8217;t throw the same events as before. Despite setbacks, we&amp;#8217;ve had impressive long-term growth. If you describe us as a &amp;#8220;hackerspace,&amp;#8221; we are the largest in the United Sates, and I believe one of the largest in the world. It&amp;#8217;s clear that overall we&amp;#8217;re doing quite well, but we want to take it further. We want to keep pushing because Hacker Dojo means a lot to all of us and we want to see it, and the culture and ideals that go with it, reach new people and new places.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ve always talked about franchising and starting new locations, but we&amp;#8217;ve learned that a single, 24/7 location with 400 members and around 2,000 people coming through every month is quite difficult to run, especially as a bootstrapped non-profit with minimal staff. We&amp;#8217;ve had sponsorships, but we work hard for those sponsorships and provide services to receive them. Most of our income comes from membership fees. Despite all this we&amp;#8217;re trying our best to continue to take Hacker Dojo to the next level, and it should be noted we have been quite successful so far, for many reasons that could go into another long blog post.&lt;/p&gt;

&lt;p&gt;Scaling any organization is hard. Scaling an organization like this one can be extra difficult, especially when we&amp;#8217;re trying to maintain the grassroots, bottom-up, culture that started it. We&amp;#8217;ve always tried to support the concept of a democratic organization. For the first few years we were 100% volunteer run, with no paid employees. The growth of Hacker Dojo has generated lot of extra work to get done that nobody really wants to do. Raising money, working with the city, organizing contractors, dealing with financial issues, having to move to a new location and rent the previous one &amp;#8230; all this requires a LOT of leg work and consistent attention that just wasn&amp;#8217;t happening with volunteers.&lt;/p&gt;

&lt;p&gt;Eventually, you need to start hiring full or part-time people. We now have a small staff of paid employees who tackle these more time-intensive tasks. While this has helped us manage the growth, it has created a kind of interesting tension between the forces of the democratic, bottom-up nature of our organization and the forces of more traditional, more centralized modes of operation necessary for efficient execution of a vision. The vision being in the short-term to improve the quality of the experience at Hacker Dojo, and in the long-term to bring Hacker Dojo and all that it stands for &amp;#8212; what some have called the epitome of true Silicon Valley culture &amp;#8212; to more people.&lt;/p&gt;

&lt;p&gt;This tension has been healthy and has helped Hacker Dojo often reap the benefits of both worlds. However, as we grow, so does the tension and discussion around it. This was the catalyst for our discussion at the board meeting. Now the realization I&amp;#8217;m excited about is somewhat of an aside from this issue of tension, but the issue was the catalyst for revisiting what Hacker Dojo is. I quite enjoy the occasional existential crisis as it often results in refreshed sense of purpose and meaning.&lt;/p&gt;

&lt;p&gt;We revisited many ideas, for example that Hacker Dojo is a platform, and like many platforms it can be hard to describe. We serve purposes in the worlds of education, business, social, and many others. We&amp;#8217;d talked about how Hacker Dojo has played a part in not just projects and startups, but relationships &amp;#8212; partnerships, friendships, and even marriages. We considered different organizations for analogy: universities, incubators, fraternities, and anything else that comes close to an existing framework for all the amazingness that Hacker Dojo produces.&lt;/p&gt;

&lt;p&gt;Then it hit us. Communities. Plural.&lt;/p&gt;

&lt;p&gt;What we realized is that we&amp;#8217;ve effectively been treating Hacker Dojo as one community. We&amp;#8217;ve sort of acknowledged that there are sub-groups within Hacker Dojo, but we&amp;#8217;ve more or less operated under the assumption that we serve two types of citizens: members and the general public. As we&amp;#8217;ve gotten larger, it&amp;#8217;s become much more difficult to effectively treat either of those as one group. The reality is that they are all actually part of many communities.&lt;/p&gt;

&lt;p&gt;The idea was right under our nose the whole time, just under a different guise. Events have always been a core part of Hacker Dojo because Hacker Dojo started with the idea that it could be a place where people could meet and host events like the event that inspired Hacker Dojo itself, SuperHappyDevHouse. When an event happens on a regular basis it turns into a community. A group of people with a common interest and/or set of values come together, turn into a community, and these communities grow, develop, and spawn really interesting things, just as SuperHappyDevHouse spawned Hacker Dojo.&lt;/p&gt;

&lt;p&gt;Hacker Dojo now serves many communities both inside and outside of Hacker Dojo; not only internal communities but external ones as well. External communities can also leverage the infrastructure that Hacker Dojo provides. These communities might already have a member of Hacker Dojo, or someone in the community chooses to become a member of Hacker Dojo, usually to throw an event. Once that community gets into Hacker Dojo, they not only see Hacker Dojo, but all the other communities that come together under our roof. Sometimes this inspires even more people to sign up as members, not just to be a part of Hacker Dojo, but to participate in and see what other communities Hacker Dojo offers.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;re now thinking of Hacker Dojo not just as a community hub, but as a hub of communities. A community &lt;a href='http://en.wikipedia.org/wiki/Trading_zones'&gt;trading zone&lt;/a&gt;, if you will. While we will always support and listen to individual members, we should begin to think of communities, in the plural, as first-class citizens of Hacker Dojo. This may seem like a subtle change but it is a big difference. It means acknowledging and supporting the communities that operate in and around Hacker Dojo. It means going to those communities and asking how we can better serve &lt;em&gt;them as a community&lt;/em&gt;, not just individual members.&lt;/p&gt;

&lt;p&gt;By connecting with communities we can provide infrastructure to foster their growth and development. Imagine going to the Hacker Dojo website and seeing a page devoted to the many communities of Hacker Dojo. When a new member signs up they could indicate their interests and we could provide them with a list of communities they might be interested in. Hacker Dojo would in a sense then be improving the communities&amp;#8217; &amp;#8220;deal flow.&amp;#8221;&lt;/p&gt;

&lt;p&gt;Rethinking Hacker Dojo as infrastructure for communities has led to lots of exciting new ideas. By focusing on empowering them with infrastructure that allows them to flourish, we are then supporting our members in a more meaningful way.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m hoping this simple change in the way the board and members invested in Hacker Dojo think about Hacker Dojo will hopefully lead to lots of positive change. We don&amp;#8217;t have these conversations very often on the board but we need to have them to maintain the vision of Hacker Dojo and we need to have them in public. Clearly this is a collaborative effort, so we want to know how the general community feels about this idea. So I&amp;#8217;m putting this out there, and hopefully it will lead to more exciting discussions.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Dokku: The smallest PaaS implementation you've ever seen</title>
   <link href="http://progrium.com/blog/2013/06/19/dokku-the-smallest-paas-implementation-youve-ever-seen"/>
   <updated>2013-06-19T00:00:00-07:00</updated>
   <id>http://progrium.com/blog/2013/06/19/dokku-the-smallest-paas-implementation-youve-ever-seen</id>
   <content type="html">&lt;p&gt;&lt;a href='https://github.com/progrium/dokku'&gt;Dokku&lt;/a&gt; is a mini-Heroku powered by Docker written in less than 100 lines of Bash. Once it&amp;#8217;s set up on a host, you can push Heroku-compatible applications to it via Git. They&amp;#8217;ll build using Heroku buildpacks and then run in isolated containers. The end result is your own, single-host version of Heroku.&lt;/p&gt;

&lt;p&gt;Dokku is under 100 lines because it&amp;#8217;s built out of several components that do most of the heavy lifting: Docker, Buildstep, and gitreceive.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://www.docker.io/'&gt;Docker&lt;/a&gt; is a container runtime for Linux. This is a high-level container primitive that gives you a similar technology to what powers Heroku Dynos. It provides the heart of Dokku.&lt;/li&gt;

&lt;li&gt;&lt;a href='https://github.com/progrium/buildstep'&gt;Buildstep&lt;/a&gt; uses Heroku&amp;#8217;s open source buildpacks and is responsible for building the base images that applications are built on. You can think of it as producing the &amp;#8220;stack&amp;#8221; for Dokku, to borrow a concept from Heroku.&lt;/li&gt;

&lt;li&gt;&lt;a href='https://github.com/progrium/gitreceive'&gt;Gitreceive&lt;/a&gt; is a project that provides you with a git user that you can push repositories to. It also triggers a script to handle that push. This provides the push mechanism that you might be familiar with from Heroku.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a few other projects being developed to support Dokku and expand its functionality without inflating its line count. Each project is independently useful, but I&amp;#8217;ll share more about these as they&amp;#8217;re integrated into Dokku.&lt;/p&gt;

&lt;p&gt;For now, here&amp;#8217;s a screencast that shows how to set up Dokku, along with a quick walk-through of the code.&lt;/p&gt;
&lt;iframe allowFullScreen='allowFullScreen' frameborder='0' height='394' mozallowfullscreen='mozallowfullscreen' src='http://player.vimeo.com/video/68631325' webkitAllowFullScreen='webkitAllowFullScreen' width='700'&gt;No iFrames?&lt;/iframe&gt;</content>
 </entry>
 
 <entry>
   <title>Executable Tweets and Programs in Short URLs</title>
   <link href="http://progrium.com/blog/2013/01/05/executable-tweets-and-programs-in-short-urls"/>
   <updated>2013-01-05T00:00:00-08:00</updated>
   <id>http://progrium.com/blog/2013/01/05/executable-tweets-and-programs-in-short-urls</id>
   <content type="html">&lt;p&gt;A few weeks ago I was completely consumed for the better part of a day that I would have otherwise spent on more practical work.&lt;/p&gt;
&lt;blockquote class='twitter-tweet tw-align-center'&gt;&lt;p&gt;Let's reflect. On a whim, I spent 6 hours writing programs that live in URL shorteners to create installable programs from Tweets.&lt;/p&gt;&amp;mdash; Jeff Lindsay (@progrium) &lt;a data-datetime='2012-12-13T07:01:11+00:00' href='https://twitter.com/progrium/status/279118756561711104'&gt;December 12, 2012&lt;/a&gt;&lt;/blockquote&gt;&lt;script charset='utf-8' src='//platform.twitter.com/widgets.js'&gt; &lt;/script&gt;
&lt;p&gt;Yeah, what? Weird, right? It started from a Twitter conversation earlier that day with my friend Joel:&lt;/p&gt;
&lt;blockquote class='twitter-tweet tw-align-center'&gt;&lt;p&gt;$ for app in `heroku apps | grep -v '='`; do echo &lt;a href='https://twitter.com/search/$app'&gt;$app&lt;/a&gt;; heroku ps --app &lt;a href='https://twitter.com/search/$app'&gt;$app&lt;/a&gt;; done # how to figure out what you have running on heroku&lt;/p&gt;&amp;mdash; Joël Franusic (@jf) &lt;a data-datetime='2012-12-13T01:10:20+00:00' href='https://twitter.com/jf/status/279030460674347008'&gt;December 12, 2012&lt;/a&gt;&lt;/blockquote&gt;&lt;script charset='utf-8' src='//platform.twitter.com/widgets.js'&gt; &lt;/script&gt;&lt;blockquote class='twitter-tweet tw-align-center' data-in-reply-to='279030460674347008'&gt;&lt;p&gt;@&lt;a href='https://twitter.com/jf'&gt;jf&lt;/a&gt; reminds me of yet another app i need to build&lt;/p&gt;&amp;mdash; Jeff Lindsay (@progrium) &lt;a data-datetime='2012-12-13T01:10:56+00:00' href='https://twitter.com/progrium/status/279030609345667072'&gt;December 12, 2012&lt;/a&gt;&lt;/blockquote&gt;&lt;script charset='utf-8' src='//platform.twitter.com/widgets.js'&gt; &lt;/script&gt;&lt;blockquote class='twitter-tweet tw-align-center' data-in-reply-to='279030609345667072'&gt;&lt;p&gt;@&lt;a href='https://twitter.com/progrium'&gt;progrium&lt;/a&gt; I just wrote and launched a &quot;client side&quot; &quot;bash app&quot; right there. Bam.&lt;/p&gt;&amp;mdash; Joël Franusic (@jf) &lt;a data-datetime='2012-12-13T01:15:47+00:00' href='https://twitter.com/jf/status/279031831809097728'&gt;December 12, 2012&lt;/a&gt;&lt;/blockquote&gt;&lt;script charset='utf-8' src='//platform.twitter.com/widgets.js'&gt; &lt;/script&gt;&lt;blockquote class='twitter-tweet tw-align-center' data-in-reply-to='279031831809097728'&gt;&lt;p&gt;@&lt;a href='https://twitter.com/jf'&gt;jf&lt;/a&gt; app tweets. an app in a tweet.&lt;/p&gt;&amp;mdash; Jeff Lindsay (@progrium) &lt;a data-datetime='2012-12-13T01:16:53+00:00' href='https://twitter.com/progrium/status/279032107265839104'&gt;December 12, 2012&lt;/a&gt;&lt;/blockquote&gt;&lt;script charset='utf-8' src='//platform.twitter.com/widgets.js'&gt; &lt;/script&gt;&lt;blockquote class='twitter-tweet tw-align-center' data-in-reply-to='279032107265839104'&gt;&lt;p&gt;@&lt;a href='https://twitter.com/progrium'&gt;progrium&lt;/a&gt; $ apptweet install id:279030460674347008&lt;/p&gt;&amp;mdash; Joël Franusic (@jf) &lt;a data-datetime='2012-12-13T01:19:10+00:00' href='https://twitter.com/jf/status/279032681373790208'&gt;December 12, 2012&lt;/a&gt;&lt;/blockquote&gt;&lt;script charset='utf-8' src='//platform.twitter.com/widgets.js'&gt; &lt;/script&gt;
&lt;p&gt;This wishful brainstorming inspired me to start building exactly that. But first, a digression.&lt;/p&gt;

&lt;p&gt;The idea reminded me of an idea I got from &lt;a href='https://twitter.com/rndmcnlly'&gt;Adam Smith&lt;/a&gt; back when I was working on Scriptlets. If you can execute code from a URL, you could &amp;#8220;store&amp;#8221; a program in a shortened URL. I decided to combine this with the curl-pipe-bash technique that&amp;#8217;s been starting to get popular to bootstrap installs. If you&amp;#8217;re unfamiliar, take this Gist of a Bash script:&lt;/p&gt;
&lt;script src='https://gist.github.com/4464431.js'&gt; &lt;/script&gt;
&lt;p&gt;Given the &amp;#8220;view raw&amp;#8221; URL for that Gist, you can curl it and pipe it into Bash to execute it right there in your shell. It would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -s https://gist.github.com/raw/4464431/gistfile1.txt | bash
Hello world&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of having Gist store the program, how could we make it so the source would just live within the URL? Well in the case of curl-pipe-bash, we just need that source to be returned in the body of a URL. So I built a simple app to run on Heroku that takes the query string and outputs it in the body, a sort of echo service.&lt;/p&gt;
&lt;script src='https://gist.github.com/4464442.js'&gt; &lt;/script&gt;
&lt;p&gt;Letting you do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl &amp;quot;http://queryecho.herokuapp.com?Hello+world&amp;quot;
Hello world&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which you could conceal and shorten with a URL shortener, like Bitly. I prefer the j.mp domain Bitly has. And since they&amp;#8217;re just redirecting you to the long URL, you&amp;#8217;d use the &lt;code&gt;-L&lt;/code&gt; option in curl to make it follow redirects:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -L http://j.mp/RyUN03
Hello world&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you make a short URL from the bitly website, they conveniently make sure the query string is properly URL encoded. So if I just typed &lt;code&gt;queryecho.herokuapp.com/?echo &amp;quot;Hello world&amp;quot;&lt;/code&gt; into bitly, it would give me a short URL with a properly URL encoded version of that URL that would return &lt;code&gt;echo &amp;quot;Hello world&amp;quot;&lt;/code&gt;. This URL we could then curl-pipe into Bash:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -Ls http://j.mp/VGgI3o | bash
Hello world&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See what&amp;#8217;s going on there? We wrote a simple Hello world program in Bash that effectively lives in that short URL. And we can run it with the curl-pipe-bash technique.&lt;/p&gt;

&lt;p&gt;Later in our conversation, Joel suggests an example &amp;#8220;app tweet&amp;#8221; that if executed in Bash given a URL argument, it would tell you where it redirects. So if you gave it a short URL, it would tell you the long URL.&lt;/p&gt;
&lt;blockquote class='twitter-tweet tw-align-center' data-in-reply-to='279032107265839104'&gt;&lt;p&gt;@&lt;a href='https://twitter.com/progrium'&gt;progrium&lt;/a&gt; $ echo &quot;$1&quot;; curl -IL --silent &quot;$1&quot; | grep Location | grep -o 'http.*' # this is a URL &quot;unshortener&quot;&lt;/p&gt;&amp;mdash; Joël Franusic (@jf) &lt;a data-datetime='2012-12-13T01:23:08+00:00' href='https://twitter.com/jf/status/279033679592951809'&gt;December 12, 2012&lt;/a&gt;&lt;/blockquote&gt;&lt;script charset='utf-8' src='//platform.twitter.com/widgets.js'&gt; &lt;/script&gt;
&lt;p&gt;Just so you know what it would look like, if you put that program in a shell script and ran it against a short URL that redirected to www.google.com, this is what you would see:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./unshortener.sh http://j.mp/www-google-com
http://j.mp/www-google-com
http://www.google.com/&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It prints the URL you gave it and then resolves the URL and prints the long URL. Pretty simple.&lt;/p&gt;

&lt;p&gt;So I decided to put this program in a short URL. Here we have &lt;a href='http://j.mp/TaHyRh'&gt;j.mp/TaHyRh&lt;/a&gt; which will resolve to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://queryecho.herokuapp.com/?echo%20%22$url%22;%20curl%20-ILs%20%22$url%22%20|%20grep%20Location%20|%20grep%20-o%20&amp;#39;http.*&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Luckily I didn&amp;#8217;t have to do all that URL encoding. I just pasted his code in after &lt;code&gt;queryecho.herokuapp.com/?&lt;/code&gt; and bitly took care of it. What&amp;#8217;s funny is that this example program is made to run on short URLs, so when I told him about it, my example ran on the short URL that contained the program itself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -Ls http://j.mp/TaHyRh | url=http://j.mp/TaHyRh bash
http://j.mp/TaHyRh
http://queryecho.herokuapp.com/?echo &amp;quot;$url&amp;quot;; curl -ILs &amp;quot;$url&amp;quot; | grep Location | grep -o &amp;#39;http.*&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may have noticed my version of the program uses &lt;code&gt;$url&lt;/code&gt; instead of &lt;code&gt;$1&lt;/code&gt; because we have to use environment variables to provide input to curl-pipe-bash scripts. For reference, to run my URL script against the google.com short URL we made before, it would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -Ls http://j.mp/TaHyRh | url=http://j.mp/www-google-com bash
http://j.mp/www-google-com
http://www.google.com/&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay, so we can now put Bash scripts in short URLs. What happened to installing apps in Tweets? Building an &lt;code&gt;apptweet&lt;/code&gt; program like Joel imagined would actually be pretty straightforward. But I wanted to build it in and install it with these weird programs-in-short-URLs.&lt;/p&gt;

&lt;p&gt;The first obstacle was figuring out how to get it to modify your current environment. Normally curl-pipe-bash URLs install a downloaded program into your &lt;code&gt;PATH&lt;/code&gt;. But I didn&amp;#8217;t want to install a bunch of files on your computer. Instead I just wanted to install a temporary Bash function that would disappear when you leave your shell session. In order to do this, I had to do a variant of the curl-pipe-bash technique using eval:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ eval $(curl -Ls http://j.mp/setup-fetchtweet)
$ fetchtweet 279072855206031360
@jf you asked for it... Jeff Lindsay (@progrium) December 13, 2012&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see by inspecting that URL, it just defines a Bash function that runs a Python script from a Gist. I cheated and used Gist for some reason. That Python script uses the Twitter embed endpoint (same one used for the embedded Tweets in this post) to get the contents of a Tweet without authentication.&lt;/p&gt;

&lt;p&gt;The next thing I built installed and used fetchtweet to get a Tweet, parse it, put it in a Bash function named by the string after an &lt;code&gt;#exectweet&lt;/code&gt; hashtag (which happens to also start a comment in Bash). So here we have a Tweet with a program in it:&lt;/p&gt;
&lt;blockquote class='twitter-tweet tw-align-center'&gt;&lt;p&gt;echo Hello world &lt;a href='https://twitter.com/search/%23exectweet'&gt;#exectweet&lt;/a&gt; helloworld&lt;/p&gt;&amp;mdash; Jeff Lindsay (@progrium) &lt;a data-datetime='2012-12-13T04:57:28+00:00' href='https://twitter.com/progrium/status/279087620145958912'&gt;December 12, 2012&lt;/a&gt;&lt;/blockquote&gt;&lt;script charset='utf-8' src='//platform.twitter.com/widgets.js'&gt; &lt;/script&gt;
&lt;p&gt;To install it, we&amp;#8217;d run this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ id=279087620145958912 eval $(curl -Ls http://j.mp/install-tweet)
Installed helloworld from Tweet 279087620145958912
$ helloworld
Hello world&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just installed a program from a Tweet and ran it! Then I wrapped this up into a command you could install. To install the installer. This time it would let you give it the URL to a Tweet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ eval $(curl -Ls http://j.mp/install-exectweet) 
Installed exectweet
$ exectweet https://twitter.com/progrium/status/279087620145958912
Installed helloworld from Tweet 279087620145958912
$ helloworld
Hello world&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where would I go from there? An app that calls itself into a loop, of course!&lt;/p&gt;
&lt;blockquote class='twitter-tweet tw-align-center'&gt;&lt;p&gt;exectweet &lt;a href='http://t.co/ri0XTprA' title='http://j.mp/recursive-app'&gt;j.mp/recursive-app&lt;/a&gt; ; recursive-app &lt;a href='https://twitter.com/search/%23exectweet'&gt;#exectweet&lt;/a&gt; recursive-app&lt;/p&gt;&amp;mdash; Jeff Lindsay (@progrium) &lt;a data-datetime='2012-12-13T07:20:12+00:00' href='https://twitter.com/progrium/status/279123541054595074'&gt;December 12, 2012&lt;/a&gt;&lt;/blockquote&gt;&lt;script charset='utf-8' src='//platform.twitter.com/widgets.js'&gt; &lt;/script&gt;
&lt;pre&gt;&lt;code&gt;$ exectweet https://twitter.com/progrium/status/279123541054595074 &amp;amp;&amp;amp; recursive-app
Installed recursive-app from Tweet 279123541054595074
Installed recursive-app from Tweet 279123541054595074
Installed recursive-app from Tweet 279123541054595074
Installed recursive-app from Tweet 279123541054595074
...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously, this whole project was just a ridiculous, mind-bending exploration. I shared most of these examples on Twitter as I was making them. Here was my favorite response.&lt;/p&gt;
&lt;blockquote class='twitter-tweet tw-align-center' data-in-reply-to='279087620145958912'&gt;&lt;p&gt;@&lt;a href='https://twitter.com/progrium'&gt;progrium&lt;/a&gt; End of the world, brought to you by Jeff Lindsay, via the Internet collapsing in on itself and taking the world with it.&lt;/p&gt;&amp;mdash; Matt Mechtley (@biphenyl) &lt;a data-datetime='2012-12-13T05:00:44+00:00' href='https://twitter.com/biphenyl/status/279088441084497922'&gt;December 12, 2012&lt;/a&gt;&lt;/blockquote&gt;&lt;script charset='utf-8' src='//platform.twitter.com/widgets.js'&gt; &lt;/script&gt;
&lt;p&gt;You may have noticed, it just happened to be 12/12/2012 that day.&lt;/p&gt;
&lt;style type='text/css'&gt;
.twitter-tweet-rendered {
  clear: none!important;
}
.twt-reply {
  display: none!important;
}
&lt;/style&gt;</content>
 </entry>
 
 <entry>
   <title>Where did Localtunnel come from?</title>
   <link href="http://progrium.com/blog/2013/01/01/where-did-localtunnel-come-from"/>
   <updated>2013-01-01T00:00:00-08:00</updated>
   <id>http://progrium.com/blog/2013/01/01/where-did-localtunnel-come-from</id>
   <content type="html">&lt;p&gt;Five years ago, async network programming scared me. I was a web developer. Working with the high level tools and frameworks of HTTP seemed much easier than any sort of serious low level networking. Especially since network programming would often also mean some kind of concurrent programming with threads or callbacks. I had mostly avoided multithreading and had no idea what an event loop was. I came from PHP.&lt;/p&gt;

&lt;p&gt;Around 2007, I was starting to think about webhooks. One motivator was how you could use webhooks to let web developers, like me, build systems that used other protocols without them having to work with that protocol. For example, one of my first projects with webhooks was called Mailhooks. I wanted to accept email in my application, but I didn&amp;#8217;t want to deal with email servers. I wanted to get an HTTP POST when an email came in with all the email fields nicely provided as POST parameters.&lt;/p&gt;

&lt;p&gt;This is how I started working with Twisted. Twisted became my main tool to build webhook adapters for existing protocols. I even tried to generalize that idea in a project called Protocol Droid. Slowly I started to grok, and not fear, this kind of programming.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s funny how my desire to work with abstractions that didn&amp;#8217;t exist yet to avoid a certain kind of programming was directly responsible for me eventually becoming an expert in that kind of programming.&lt;/p&gt;

&lt;p&gt;Then in late 2009, I had another idea while thinking about webhooks. It would be great if I could expose a local web server to the Internet with a friendly URL. It should just be a simple command. There would have to be a server, but there could just be a public server that you didn&amp;#8217;t even have to think about.&lt;/p&gt;

&lt;p&gt;I committed &lt;a href='https://github.com/progrium/localtunnel/tree/prototype'&gt;the first prototype of Localtunnel&lt;/a&gt; to Github in January 2010. It was written entirely in Twisted. It also didn&amp;#8217;t actually work. I really recommend taking a look because it was terrible. One of the challenges was multiplexing the HTTP requests into a single tunnel connection. My approach was so naive it just didn&amp;#8217;t work. As soon as you made more than one request at a time, it broke.&lt;/p&gt;

&lt;p&gt;A few months later, I decided to take a different approach. Instead of doing my own protocol, client, and server, I&amp;#8217;d just make a wrapper around what I knew already worked: SSH tunneling. This was pretty quick to make happen, and that version is basically what&amp;#8217;s been in production to this day.&lt;/p&gt;

&lt;p&gt;This shortcut came with a lot of weird quirks. For example, the easiest way I found to implement an SSH tunnel client was a Ruby library, so I implemented the client in Ruby. The server, though, was in Python because I still only really knew Twisted for evented programming.&lt;/p&gt;

&lt;p&gt;Actually, using SSH was the source of most of the quirks and annoyances. I was pretty bothered that it slowed down the initial user experience by requiring a public key to be uploaded. But most of the pain was operational. The server, sshd, would create a process for every tunnel. Localtunnel also needed its own user and to pretty much own the SSH configuration for that machine. Then, on occasion, something weird would happen where a tunnel would die and the process would go crazy eating up CPU. It would have to be manually killed or it would eventually bring the server to a halt. And, eventually, the authorized_keys file would become enormous from all the keys uploaded.&lt;/p&gt;

&lt;p&gt;On top of all this, SSH is pretty opaque. It&amp;#8217;s been around for so long and used so much that it certainly just works &amp;#8230; you just don&amp;#8217;t really know how. I still don&amp;#8217;t know how SSH does tunneling or what the protocol looks like, even after trying to read the RFC for it.&lt;/p&gt;

&lt;p&gt;By mid-2011, I was working at Twilio building distributed, real-time messaging systems at scale. I certainly came a long way from fearing async network programming. Localtunnel was still running the implementation based on SSH. By then it had quite a large user base and collected a number of bugs and feature requests. I also had my own operations and user experience wish list. With such a huge list of new requirements, so many problems with the current implementation, and a drastically different experience level and mindset, I decided to redesign Localtunnel from the ground up.&lt;/p&gt;

&lt;p&gt;Since I was pretty consumed by Twilio, I didn&amp;#8217;t have a lot of time to work on Localtunnel. I thought the biggest bang for buck in the long term would be to slowly work on the new version. They say software is never done, but I personally believe software can be finished. It just requires an aggressive drive for simplicity, and the &lt;em&gt;only&lt;/em&gt; way you can make significant advances in simplicity is through redesign.&lt;/p&gt;

&lt;p&gt;In the meantime, users continued to experience issues with the current implementation. These problems only got worse as it became more popular. For example, the biggest issue was that the namespace for tunnel names was too small. Users would get requests from old tunnels, and in rare cases tunnel names would get pulled out from under you while using them. This created confusion and a lot of emails and issue tickets, but it still worked with the occasional restart.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve used this constant stream of complaints, which has been going on for almost two years, to make sure I keep making progress on the new version. In fact, I&amp;#8217;m pretty sure I needed it because of my lifestyle of abundant projects.&lt;/p&gt;

&lt;p&gt;Last week I finally &lt;a href='http://progrium.com/blog/2012/12/25/localtunnel-v2-available-in-beta/'&gt;released a beta of the new version&lt;/a&gt;. What&amp;#8217;s interesting is that it&amp;#8217;s a completely different architecture from what I started out with for the redesign. After the original unreleased prototype, there&amp;#8217;s been 3 major approaches to implementation. In the coming weeks I&amp;#8217;m going to share a more technical history of the architecture of Localtunnel, leading up to a deep exploration of what I hope will be its final form.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Localtunnel v2 available in beta</title>
   <link href="http://progrium.com/blog/2012/12/25/localtunnel-v2-available-in-beta"/>
   <updated>2012-12-25T00:00:00-08:00</updated>
   <id>http://progrium.com/blog/2012/12/25/localtunnel-v2-available-in-beta</id>
   <content type="html">&lt;p&gt;A few years back, I released &lt;a href='http://localtunnel.com'&gt;Localtunnel&lt;/a&gt; to make it super easy to expose a local web server to the Internet for demos and debugging. Since then, it&amp;#8217;s gotten a ton of use. A few people even copied it and tried to make a paid service around the idea. Luckily, Localtunnel will always be free and open source.&lt;/p&gt;

&lt;p&gt;With the release of &lt;a href='http://j.mp/localtunnel-v2'&gt;Localtunnel v2&lt;/a&gt;, it will not only remain competitive with similar services, but continue to be the innovator of the group. I&amp;#8217;ll post more on this later.&lt;/p&gt;

&lt;p&gt;For now, let&amp;#8217;s talk logistics. The current, soon-to-be-legacy Localtunnel stack includes the client that you install with Rubygems, and a server that runs on a host at Rackspace. These will continue to be available into 2013, but will be marked as deprecated. This means you should be making the switch to v2.&lt;/p&gt;

&lt;p&gt;Besides the fact v1 will eventually be shutdown, there are a number of reasons to switch to v2. Here are some of the major ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;#8217;s actively maintained. Bug reports, pull requests, and service interruptions are dealt with promptly.&lt;/li&gt;

&lt;li&gt;No more mysterious requests from old tunnels. The subdomain namespace is much larger.&lt;/li&gt;

&lt;li&gt;Custom subdomains. The new client lets you pick a tunnel name on a first come, first served basis.&lt;/li&gt;

&lt;li&gt;Supports long-polling, HTTP streaming, and WebSocket upgrades. Soon general TCP tunneling.&lt;/li&gt;

&lt;li&gt;No SSH key to start using it. A minor annoyance setting up v1, but it doesn&amp;#8217;t exist in v2.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One implementation detail that affects users is that the client is now written in Python. This means you won&amp;#8217;t use Rubygems to install it. Instead, you can use &lt;code&gt;easy_install&lt;/code&gt; or &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ easy_install localtunnel&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On some systems, you may need to run this with &lt;code&gt;sudo&lt;/code&gt;. If you don&amp;#8217;t have &lt;code&gt;easy_install&lt;/code&gt;, first make sure you have Python installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python --version&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Localtunnel requires Python 2.6 or later, which comes standard on most systems. If you don&amp;#8217;t have Python, you can &lt;a href='http://wiki.python.org/moin/BeginnersGuide/Download'&gt;install it for your platform&lt;/a&gt;. If &lt;code&gt;easy_install&lt;/code&gt; isn&amp;#8217;t available after you install Python, you can install it with this bootstrap script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl http://peak.telecommunity.com/dist/ez_setup.py | python&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you&amp;#8217;ve installed Localtunnel with &lt;code&gt;easy_install&lt;/code&gt;, it will be available as &lt;code&gt;localtunnel-beta&lt;/code&gt;. This lets you keep the old client to use in case anything goes wrong with v2 during the beta. Eventually, it will be installed as &lt;code&gt;localtunnel&lt;/code&gt;, but only after v1 is shutdown.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;localtunnel-beta&lt;/code&gt; is pretty much the same as before:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ localtunnel-beta 8000
  Thanks for trying localtunnel v2 beta!

  Port 8000 is now accessible from http://fb0322605126.v2.localtunnel.com ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like I mentioned earlier, you can use a custom tunnel name if it&amp;#8217;s not being used:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ localtunnel-beta -n foobar 8000
  Thanks for trying localtunnel v2 beta!

  Port 8000 is now accessible from http://foobar.v2.localtunnel.com ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keep in mind v2 is in active development. There might be some downtime while I work out operational bugs, but you can always use the old version if you run into problems.&lt;/p&gt;

&lt;p&gt;If you do run into any problems, you can &lt;a href='http://twitter.com/progrium'&gt;ping me on Twitter&lt;/a&gt;. If you get traceback you can &lt;a href='https://github.com/progrium/localtunnel/issues'&gt;create an issue on Github&lt;/a&gt;. If you have more in-depth questions or want to get involved in development, check out the &lt;a href='https://groups.google.com/forum/#!forum/localtunnel'&gt;Localtunnel Google Group&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>HTTP Signatures with Content-HMAC</title>
   <link href="http://progrium.com/blog/2012/12/17/http-signatures-with-content-hmac"/>
   <updated>2012-12-17T00:00:00-08:00</updated>
   <id>http://progrium.com/blog/2012/12/17/http-signatures-with-content-hmac</id>
   <content type="html">&lt;p&gt;Today I wanted to propose another header. It would be used for signing HTTP content with HMAC, and is appropriately called Content-HMAC. In &lt;a href='http://progrium.com/blog/2012/11/26/x-callback-header-an-evented-web-building-block/'&gt;a previous post&lt;/a&gt; about the Callback header, I mentioned using an X-Signature header in callback requests to sign the payload of the callback. It looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;X-Signature: sha1=&amp;lt;hexdigest of sha1 hmac&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The HMAC would be built with just the content of the request (i.e., no headers, no query params) and a secret key. &lt;a href='http://pubsubhubbub.googlecode.com/svn/trunk/pubsubhubbub-core-0.3.html#authednotify'&gt;This was borrowed directly from the PubSubHubbub spec&lt;/a&gt;, but the general idea of using HMAC to sign callback requests has become pretty standard in the world of webhooks. Here are details on how &lt;a href='http://code.google.com/p/support/wiki/PostCommitWebHooks#Authentication'&gt;Google&lt;/a&gt; and &lt;a href='http://www.twilio.com/docs/security#validating-requests'&gt;Twilio&lt;/a&gt; use them.&lt;/p&gt;

&lt;p&gt;Each of these providers is using their own header for basically the same use case. It would seem like there is an opportunity to standardize on a common header format for it. There&amp;#8217;s been a number of proposals for a general Signature header to sign an entire request. There was a fairly comprehensive one proposed called &lt;a href='http://tools.ietf.org/html/draft-burke-content-signature-00'&gt;Content-Signature&lt;/a&gt;. With signing, the difficulty is often getting the input string correct. Most signing mechanisms need to normalize their input. If you&amp;#8217;ve ever had to deal with OAuth or AWS signatures, you&amp;#8217;ll know what I&amp;#8217;m talking about. With request signing, the headers pose a particularly tricky situation with signing since they often change as the request goes through proxies.&lt;/p&gt;

&lt;p&gt;The idea of Content-HMAC is to focus on a simpler goal of signing just the content payload, since it&amp;#8217;s normally treated as-is, and is not altered when going through proxies. The X-Signature proposal I had was a decent one, as is almost any cowpath-based proposal, but I realized it would probably be a good idea to limit the implied scope to what it&amp;#8217;s really doing: providing an HMAC for request (or response) content.&lt;/p&gt;

&lt;p&gt;It turns out there&amp;#8217;s a similar header that&amp;#8217;s not used that often anymore called Content-MD5. It was a simple mechanism to provide an MD5 digest of the content. My current proposal is to take this existing pattern and apply it to HMAC, giving us the Content-HMAC header:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Content-HMAC: &amp;lt;hash mechanism&amp;gt; &amp;lt;base64 encoded binary HMAC&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;#8217;s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Content-HMAC: sha1 f1wOnLLwcTexwCSRCNXEAKPDm+U=&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This proposal borrows its naming convention from Content-MD5, but the format is more similar to Authorization. The Authorization header allows multiple authorization schemes to be used. You define the scheme followed by a space and then the actual authorization data. Since HMAC allows different hashing techniques to be used, we use that pattern here to let you specify the hashing technique. We also take the existing pattern of base64 encoding used in several HTTP headers to make it conform even more to existing standards.&lt;/p&gt;

&lt;p&gt;Content-HMAC was created for callback requests, but it&amp;#8217;s a useful way to sign any HTTP request or response payload. For requests, it&amp;#8217;s worth mentioning it only applies when there is a content payload, so for example it&amp;#8217;s meaningless with GET requests.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s also very worth mentioning that the need for content signing is unnecessary when using HTTPS. It currently looks like the future will eventually be 100% SSL encrypted HTTP, but until then, there will always be situations where HTTPS is not available. Content-HMAC is perhaps a stop-gap until we reach that ideal. Until then, I think Content-HMAC is a good, standard way to add authorization to callback requests.&lt;/p&gt;

&lt;p&gt;Let me know if you have any questions or feedback on this proposal. Further discussion is likely to happen on the &lt;a href='https://groups.google.com/forum/#!forum/webhooks'&gt;Webhooks Google Group&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Avoiding environmental fallacy with systems thinking</title>
   <link href="http://progrium.com/blog/2012/12/15/avoiding-environmental-fallacy-with-systems-thinking"/>
   <updated>2012-12-15T00:00:00-08:00</updated>
   <id>http://progrium.com/blog/2012/12/15/avoiding-environmental-fallacy-with-systems-thinking</id>
   <content type="html">&lt;p&gt;In 1905, German chemist Alfred Einhorn invented Novocaine to be used by doctors in surgery as a general anesthetic. Unfortunately, doctors didn&amp;#8217;t find Novocaine to be a suitable general anesthetic. However, dentists were dying to use it as a &lt;em&gt;local&lt;/em&gt; anesthetic. The inventor didn&amp;#8217;t want to sell it for the &amp;#8220;mundane purpose&amp;#8221; of drilling teeth, so he continued marketing to doctors and surgeons. Einhorn persisted until his death, unwilling to let the market dictate the use of his invention. He felt the intrinsic value of Novocaine as a general anesthetic was enough to sell it as such, no matter what extrinsic value was placed on it by actual market demands. Charles West Churchman would call this an &amp;#8220;environmental fallacy.&amp;#8221;&lt;/p&gt;

&lt;p&gt;Environmental fallacy is the blunder of ignoring or not understanding the effects of the environment of a system. Examples of this fallacy are all around us. Anti-drug legislation fails to see long-term, societal implications because they&amp;#8217;re preoccupied by the immediate, localized problems. Efforts to improve a standardized public education are precisely and meticulously solving the wrong problem. Silicon Valley startups spend our brightest intellectual resources on photo sharing and social-whatever, while industries that affect the quality of living for millions are left with bureaucrats.&lt;/p&gt;

&lt;p&gt;One could describe these all as failing to see the bigger picture. In systems we call this the environment of a system. The significance of which is governed by the principle of openness.&lt;/p&gt;

&lt;p&gt;Openness is the principle that open systems, which includes everything from problems to corporations to opinions to products, can only be understood in the context of their environment. This is because open systems are dependent on and co-determined by their context. A closed system, like a watch or a hammer, can function entirely based on its own internal structure and process. An open system interacts with and is inextricably linked with its environment.&lt;/p&gt;
&lt;center&gt;&lt;img src='/images/content/open_vs_closed_sys.png' title='Open systems vs Closed systems' /&gt;&lt;/center&gt;
&lt;p&gt;This insight may seem banal. In fact, the younger generations and the progressive recent generations are quite familiar with this concept at least as a vague intuition. But this is a very recent development. We don&amp;#8217;t appreciate how little this idea was understood for basically all of human existence up until just a few decades ago.&lt;/p&gt;

&lt;p&gt;Science, for example. Science is our greatest effort to understand our objective reality. Like any other open system, it was defined and limited by the context of its time. As modern science began to develop 350 years ago, it was based on a worldview that denied the principle of openness. Most subjects were studied as closed systems.&lt;/p&gt;

&lt;p&gt;For the greater part of its life, science has only understood the environment as something to be minimized. This is best shown in laboratories, a symbol of scientific activity, which are specifically designed to exclude the environment. Based on the doctrines of determinism and reductionism, science up until the last 4 or 5 decades has ignored the environment in favor of reductionist explanations focused on internal determinism. At best this only partially describes most actual phenomenon. For example, Galileo&amp;#8217;s equations for freely falling bodies completely ignore air resistance and the rotation of Earth, and Ohm&amp;#8217;s law assumes there will be no dramatic change in surrounding temperature. In both cases, the assumption is no environment.&lt;/p&gt;

&lt;p&gt;This understated handicap of traditional science ended up as the major dilemma in the 1992 film Medicine Man. Sean Connery&amp;#8217;s character finds a miracle cure for cancer in a flower, but in the lab he&amp;#8217;s unable to reproduce it. He eventually finds out the flower itself was not the cure, but that the cure was produced by the flower interacting with another element in its environment. The unintentional moral of the story is about the significance of environment and environmental fallacy.&lt;/p&gt;

&lt;p&gt;Only until ecology took off in the mid-20th century did we have a science that explicitly observed the environment, though primarily as a subset of biology. In many ways, ecology was a precursor to systems sciences. The difference between an ecological environment and the environment of a system is that a system environment is more general. It can be used to talk about physical environments, but also abstract environments, such as decision-making and problem-solving environments.&lt;/p&gt;

&lt;p&gt;Often the environment refers to all external variables and conditions of a system, but in some cases it might refer to a particular part of the total environment. This is because the environment represents any surrounding system. Any one open system is embedded in a greater system, embedded in an even greater system, and so on. For example, one slice of how nested environments can affect an individual at work might look like this:&lt;/p&gt;
&lt;img src='/images/content/nested_environments.png' style='float: left;' title='Nested
environments' /&gt;
&lt;p&gt;If all of these layers influence each other, you start to realize, maybe somewhat helplessly, that everything depends on everything else. No wonder science originally dismissed the environment. But ignoring the complexities and dynamics of open systems leads to sometimes serious disparities from reality.&lt;/p&gt;

&lt;p&gt;In 1850, which for historical context was when California became a state and the US got its 13th president, the leading scientists of the western world convened for a conference in Europe. They actually concluded that in just 50 years, through science, they would have a complete understanding of the universe. This absurd notion stemmed from the foundations of scientific thought, which been tremendously useful, but also severely limiting. Only after the Heisenberg principle in the late 1920&amp;#8217;s have we begun to accept that reality is just too complicated to fully understand at once.&lt;/p&gt;

&lt;p&gt;Ironically, admitting this has been beneficial to our grasp of reality. It&amp;#8217;s helped us realize new frameworks for thinking and coping with our increasingly complex and interdependent world. Luckily, our world is so globalized and connected today that modern generations are growing up with this reality as a daily experience. Systems theory and systems thinking are tools that can keep the appreciation of openness and the defining power of context as a first class tenet in all our endeavors.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Async HTTP Responses with Response Redirection</title>
   <link href="http://progrium.com/blog/2012/12/06/async-http-responses-with-response-redirection"/>
   <updated>2012-12-06T00:00:00-08:00</updated>
   <id>http://progrium.com/blog/2012/12/06/async-http-responses-with-response-redirection</id>
   <content type="html">&lt;p&gt;What if you could perform any HTTP request, but get the response back via a webhook? This is the simple goal of Response Redirection, a simple micro-protocol for telling an HTTP server to send the response to a URL. Instead of returning the response in the connection created by the request, the response is returned in HTTP callback fashion.&lt;/p&gt;

&lt;p&gt;The primary use case for this is handling HTTP responses that take longer than you would prefer to keep an open connection. As we build APIs that start interacting with the real world and human processes, you could expect operations that might take hours to days to complete.&lt;/p&gt;

&lt;h3 id='example_of_response_redirection'&gt;Example of Response Redirection&lt;/h3&gt;

&lt;p&gt;Response Redirection is done by performing a regular HTTP request with two additions: a Pragma directive telling the server you want the response to be redirected, and a Callback to be used for the response.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /helloworld HTTP/1.1
Host: example.com
Pragma: redirect
Callback: &amp;lt;http://server.com/callback&amp;gt;; method=&amp;quot;post&amp;quot;; rel=&amp;quot;redirect&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The response to this is a 202 Accepted or an appropriate error code. 202 Accpted is the standard response to give for operations that have been accepted and will be processed or finished later. As soon as the server as processed the request and has rendered a response, it would perform a request:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /callback HTTP/1.1
Host: server.com
Status: 200 OK
Content-Length: 11
Content-Type: text/plain

Hello world&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we talked about with the &lt;a href='http://progrium.com/blog/2012/11/26/x-callback-header-an-evented-web-building-block/'&gt;Callback header&lt;/a&gt;, if a &lt;code&gt;secret&lt;/code&gt; parameter was given, it would imply that an HMAC signature be provided in the callback request. We&amp;#8217;ll revisit this again in another post.&lt;/p&gt;

&lt;p&gt;If the server doesn&amp;#8217;t understand &lt;code&gt;Pragma: redirect&lt;/code&gt;, it would return a normal response to the initial request and the client would have to handle it as usual.&lt;/p&gt;

&lt;h3 id='using_pragma'&gt;Using Pragma&lt;/h3&gt;

&lt;p&gt;You&amp;#8217;ll notice we didn&amp;#8217;t invent a header to tell the server to we want to do Response Redirection. You may remember Pragma&amp;#8217;s original use was only for &lt;code&gt;Pragma: no-cache&lt;/code&gt; and was eventually replaced with other cache control headers. However, the semantics of Pragma remain useful. To quote the &lt;a href='http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.32'&gt;HTTP 1.1 spec&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Pragma general-header field is used to include implementation-specific directives that might apply to any recipient along the request/response chain.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another potential header field would be the &lt;a href='http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.20'&gt;Expect header&lt;/a&gt;. The Expect header is designed to let the client specify certain behaviors expected of the server. This would be perfect except for this property:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Expect mechanism is hop-by-hop: that is, an HTTP/1.1 proxy MUST return a 417 (Expectation Failed) status if it receives a request with an expectation that it cannot meet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In today&amp;#8217;s world, this renders it useless unless we were talking about changing the behavior of proxies. The Pragma header was designed to be forwarded by proxies and ignored if it doesn&amp;#8217;t know how to fulfill the directive.&lt;/p&gt;

&lt;h3 id='alternate_implementation'&gt;Alternate Implementation&lt;/h3&gt;

&lt;p&gt;In the discussion that followed the Callback header post, not only did we learn that the &lt;code&gt;X-&lt;/code&gt; header prefix &lt;a href='http://tools.ietf.org/html/rfc6648'&gt;is now deprecated&lt;/a&gt;, but there is an RFC draft called &lt;a href='http://tools.ietf.org/html/draft-snell-http-prefer-17'&gt;Prefer Header for HTTP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It actually addresses the issue with the Expect header, providing an alternative for specifying optional preferences for how the server handles a request. One of the example preferences is for returning the response asynchronously, which is exactly what we&amp;#8217;re achieving with Response Redirection. The only missing element is the callback, which we can easily include with our Callback header. Here we augment an example directly from the spec:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /collection HTTP/1.1
Host: example.org
Content-Type: text/plain
Prefer: respond-async
Callback: &amp;lt;http://server.com/callback&amp;gt;; rel=&amp;quot;respond-async&amp;quot;

{Data}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The server would respond with 202 Accepted, just as we would have had with the Pragma implementation. It&amp;#8217;s up for discussion which implementation is ideal.&lt;/p&gt;

&lt;h3 id='last_thoughts'&gt;Last Thoughts&lt;/h3&gt;

&lt;p&gt;Granted, there are likely better ways to approach the use case we described at the beginning. Creating a resource immediately and subscribing to state changes might actually be ideal. Perhaps the Response Redirection spec is purely academic. That brings us again to the idea of HTTP Subscriptions, which I&amp;#8217;ll get to posting about soon.&lt;/p&gt;

&lt;p&gt;However, Response Redirection is a great example of a simple protocol built on top of the Callback header. The use of Prefer and Pragma will also set the stage for the design decisions of my initial informal draft of HTTP Subscriptions. It will continue this trend of reusing existing pieces of technology (Pragma, Expect, Prefer, Callback) as building blocks that, from my perspective, were intended to be re-combined to achieve new behavior.&lt;/p&gt;

&lt;p&gt;Let me know what you think in the comments or in the &lt;a href='https://groups.google.com/forum/#!forum/webhooks'&gt;Webhooks Google Group&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>X-Callback Header: Evented Web Building Block</title>
   <link href="http://progrium.com/blog/2012/11/26/x-callback-header-an-evented-web-building-block"/>
   <updated>2012-11-26T00:00:00-08:00</updated>
   <id>http://progrium.com/blog/2012/11/26/x-callback-header-an-evented-web-building-block</id>
   <content type="html">&lt;div class='alert alert-info'&gt;
Since this posting, we decided to adopt &quot;best current
practice&quot; and drop the X- prefix as described in &lt;a href='http://tools.ietf.org/html/rfc6648'&gt;RFC 6648&lt;/a&gt;. Future posts refer to this as the Callback header.
&lt;/div&gt;
&lt;p&gt;Webhooks is the simple concept of HTTP callbacks. It expands on the simple request/response model of HTTP, giving you the semantics of &lt;a href='http://j.mp/10EitT8'&gt;callbacks in programming&lt;/a&gt;. Request/response gives you one response for one request in one synchronous operation. It&amp;#8217;s like invoking a function and getting a return value. With callbacks, after you register a callback, the callback will receive one or more invocations, perhaps minutes or hours apart.&lt;/p&gt;

&lt;p&gt;Callbacks are a necessary component of any evented or reactor-based system, like Node.js, Twisted, or EventMachine. So, naturally, HTTP callbacks are necessary to achieve &lt;a href='http://progrium.com/blog/2012/11/19/from-webhooks-to-the-evented-web/'&gt;the Evented Web&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Modeling callbacks in HTTP is somewhat straightforward. The callback is a URL. You perform an HTTP request against an application to register a callback URL. The application then performs an HTTP request to that URL to invoke that callback.&lt;/p&gt;

&lt;p&gt;Those high-level requirements are enough to set anybody in the right direction to effectively implement webhooks or HTTP callbacks for their application. The problem is that now every application implements the specifics differently. While this is fine to provide a callback paradigm for each application, it doesn&amp;#8217;t let us &lt;em&gt;build&lt;/em&gt; on this paradigm. The Evented Web needs to agree on some standards, and the X-Callback header is one of those standards.&lt;/p&gt;

&lt;h3 id='xcallback_header'&gt;X-Callback Header&lt;/h3&gt;

&lt;p&gt;The X-Callback header is a proposal for a common way to describe HTTP callbacks, primarily in the case of registering them. It does not get into the specifics for different ways of using HTTP callbacks, so it&amp;#8217;s more of a building block for APIs or larger protocols such as HTTP Subscriptions, which I mentioned &lt;a href='http://progrium.com/blog/2012/11/19/from-webhooks-to-the-evented-web/'&gt;in my previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s what it looks like to use X-Callback:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;X-Callback: &amp;lt;http://example.com/callback&amp;gt;; method=&amp;quot;post&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The format is directly borrowed from the &lt;a href='http://www.w3.org/Protocols/9707-link-header.html'&gt;Link header&lt;/a&gt; used for responses. You provide a URL and then optional key-value parameters. In the case above, the HTTP method for invoking the callback was specified as a parameter.&lt;/p&gt;

&lt;p&gt;Here is a more formal description of the header:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;X-Callback     = &amp;quot;X-Callback&amp;quot; &amp;quot;:&amp;quot; #(&amp;quot;&amp;lt;&amp;quot; URI &amp;quot;&amp;gt;&amp;quot; *( &amp;quot;;&amp;quot; callback-param ) )
callback-param  = token [ &amp;quot;=&amp;quot; ( token | quoted-string ) ]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since this is just the beginning of the conversation, there are no &amp;#8220;built-in&amp;#8221; callback parameters in this definition. They&amp;#8217;re effectively all extensions. However, these are what I&amp;#8217;d propose for standard parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;method&lt;/strong&gt;: The HTTP method preferred for invoking this callback. Servers can ignore or override based on their policies, but this lets the requester optionally state preference.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;secret&lt;/strong&gt;: The secret to be used for signing callback requests. More on this in the next section.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;rel&lt;/strong&gt;: The relationship of this callback to this request, similar to the rel of the Link header. This lets you specify the role of this callback, which is useful when multiple callbacks are provided. It effectively lets you classify the callbacks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='authenticating_with_signatures'&gt;Authenticating with Signatures&lt;/h3&gt;

&lt;p&gt;A common pattern across most implementations of webhooks has been the use of signatures for authenticating the callback &amp;#8220;invocation&amp;#8221; requests. Either built-in to the X-Callback header spec or maybe as a separate extension, a standard way of providing a secret then building and including a signature would be a Good Idea. The following is a proposal based on PubSubHubbub&amp;#8217;s signature model, but is not that different from the majority of implementations out there.&lt;/p&gt;

&lt;p&gt;We start with a shared secret. Transmission of this secret can be done out of band (through a dashboard, for example), or the secret can be provided via the &lt;em&gt;secret&lt;/em&gt; parameter of the X-Callback header during registration.&lt;/p&gt;

&lt;p&gt;The secret can then be used with HMAC to sign anything. In the case of callbacks, it would sign the body of the callback request body. Since you can use different hashing techniques with HMAC, the technique used is specified along with a hexadecimal digest of the HMAC signature. This is put in the X-Signature header of requests:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;X-Signature: sha1=0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the callback handler can rebuild this signature knowing the secret and having the content body and the hash technique. Authenticating is then comparing the built signature with the one provided in the X-Signature header.&lt;/p&gt;

&lt;p&gt;Signing lets the callback handler be more certain of the source without requiring SSL. Signatures become much less necessary if all requests are using HTTPS. But having this simple complement to X-Callback makes it easy when you need it, and may help unify all the different approaches that are all effectively doing the same thing.&lt;/p&gt;

&lt;h3 id='example_callback_flow'&gt;Example Callback Flow&lt;/h3&gt;

&lt;p&gt;Let&amp;#8217;s use all this in an example, showing you the actual HTTP requests. First, we&amp;#8217;re going to register a callback at a particular endpoint:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /callbacks/register HTTP/1.1
Host: server-example.com
X-Callback: &amp;lt;http://example.com/callback&amp;gt;; method=&amp;quot;post&amp;quot;; secret=&amp;quot;opensesame&amp;quot;
Content-Length: 0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The server can respond however it likes since X-Callback header doesn&amp;#8217;t specify anything more than how to hand the server a callback. Let&amp;#8217;s assume it returned 200 OK.&lt;/p&gt;

&lt;p&gt;Now, whenever it likes, the server is going to be performing an HTTP POST on the callback URL. Since a secret was provided, the server will be providing a signature using the X-Signature header. Here&amp;#8217;s what one of those requests might look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /callback HTTP/1.1
Host: example.com
Content-Type: application/json
Content-Length: 26
X-Signature: sha1=76afe1da675cf6d3d59c71a4af44dafc69fd03f0

{&amp;quot;payload&amp;quot;: &amp;quot;Hello world&amp;quot;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;#8217;ll notice we&amp;#8217;ve stayed completely out of the content layer of HTTP. This is quite intentional. This gives implementors lots of flexibility and keeps this a &amp;#8220;pure&amp;#8221; extension to HTTP.&lt;/p&gt;

&lt;h3 id='a_building_block'&gt;A Building Block&lt;/h3&gt;

&lt;p&gt;As I&amp;#8217;ve mentioned, this header is intended to be used in APIs and protocols that use callbacks in different ways. The obvious example is HTTP Subscriptions, which will let you subscribe to events using HTTP callbacks.&lt;/p&gt;

&lt;p&gt;Another example, which I&amp;#8217;ll also talk about soon, is HTTP Response Redirection. Regular &lt;a href='http://en.wikipedia.org/wiki/URL_redirection#HTTP_status_codes_3xx'&gt;HTTP Redirection&lt;/a&gt; lets the server redirect the client&amp;#8217;s request to another URL, whereas Response Redirection lets the client redirect where the server sends the response using an HTTP callback.&lt;/p&gt;

&lt;p&gt;The X-Callback header is simple, focused, and content neutral. Hopefully this makes it a powerful building block for other technologies of the Evented Web.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>From Webhooks to the Evented Web</title>
   <link href="http://progrium.com/blog/2012/11/19/from-webhooks-to-the-evented-web"/>
   <updated>2012-11-19T00:00:00-08:00</updated>
   <id>http://progrium.com/blog/2012/11/19/from-webhooks-to-the-evented-web</id>
   <content type="html">&lt;p&gt;Back in 2007 I started thinking and talking a lot about &lt;a href='http://progrium.com/blog/2007/05/03/web-hooks-to-revolutionize-the-web/'&gt;an idea called webhooks&lt;/a&gt;. Over the following few years I started evangelizing it. I spent a lot of my free time giving talks and building tools around the idea of webhooks. Some of these tools are still around today, including &lt;a href='http://localtunnel.com'&gt;Localtunnel&lt;/a&gt; and &lt;a href='http://requestb.in'&gt;RequestBin&lt;/a&gt; (originally PostBin). There were others that might not be around anymore: &lt;a href='http://mailhooks.com'&gt;MailHooks&lt;/a&gt;, &lt;a href='http://clickhooks.com'&gt;ClickHooks&lt;/a&gt;, &lt;a href='http://twitterhooks.com'&gt;TwitterHooks&lt;/a&gt;, &lt;a href='http://scriptlets.org'&gt;Scriptlets&lt;/a&gt;, and a few others.&lt;/p&gt;

&lt;p&gt;Webhooks wasn&amp;#8217;t really a new technology in the sense that there was a specification or tangible piece of software. It was more of an architectural pattern, and a loose one at that. To me it was just a different way to think about web applications, and it opened up a lot of new possibilities.&lt;/p&gt;

&lt;p&gt;I was really excited by those possibilities, so I started telling people about it. The only problem was that it was this semi-vague idea. I often spoke in high-level notions. It was hard for some people to understand at the time. I think some people mostly got it, but a lot of people didn&amp;#8217;t get it and thought they did.&lt;/p&gt;

&lt;h3 id='confusion'&gt;Confusion&lt;/h3&gt;

&lt;p&gt;For example, the name &amp;#8220;webhooks&amp;#8221; was more about the pattern than any specific part of how it works. Webhooks involve two parts: an application that triggers a URL, and a handler at that URL. If you were to ask &amp;#8220;where is the webhook?&amp;#8221; different people will answer you differently. Some say it&amp;#8217;s the trigger side. Some say it&amp;#8217;s the handler side. For me, &amp;#8220;a webhook&amp;#8221; is the combination of both a trigger and a handler.&lt;/p&gt;

&lt;p&gt;It also didn&amp;#8217;t help that there was never a spec. I always avoided a spec because there were a lot of different implementations already out there, and you might implement it slightly different for different use cases. It made sense to me to just keep it a general pattern and not limit what was possible.&lt;/p&gt;

&lt;p&gt;I didn&amp;#8217;t want to say, &amp;#8220;Well, if you want to implement webhooks, it&amp;#8217;s got to be JSON. And use this payload structure. And this is the API for registering them. Otherwise, it&amp;#8217;s not webhooks.&amp;#8221; Because if you didn&amp;#8217;t do those things in a particular way, they&amp;#8217;d still be webhooks to me.&lt;/p&gt;

&lt;h3 id='mild_success'&gt;Mild Success&lt;/h3&gt;

&lt;p&gt;After a while, the idea got out there and companies like Google, Facebook, Wordpress, GitHub, Twilio, and other startups started implementing it. Five years later and I still often run into new applications or open source projects using the term webhooks. But even after all this time, there&amp;#8217;s still a lot of cool stuff that I wanted to emerge that hasn&amp;#8217;t really happened yet.&lt;/p&gt;

&lt;p&gt;Some of it is starting to happen, though. For example, how do you write these handlers script? I really didn&amp;#8217;t believe in being able to just plug apps together like pipes. That&amp;#8217;s something that could come later and would definitely need a spec. Instead, I wanted people to actually write handler scripts with code. That way they could make something that did whatever they wanted, exactly how they wanted.&lt;/p&gt;

&lt;p&gt;To facilitate that, I wanted a service that would let you write and it would host for you these little handler scripts for processing HTTP webhook requests. I actually built a prototype of this called Scriptlets. It was a web app where you could write JavaScript, hit save, and then you&amp;#8217;d have a little script at a URL that you could use for webhooks.&lt;/p&gt;

&lt;p&gt;Scriptlets didn&amp;#8217;t get very popular, though I didn&amp;#8217;t push it very hard. There was a lot I wanted to do with it but there wasn&amp;#8217;t enough demand to drive development, and I was so busy that it eventually became defunct.&lt;/p&gt;

&lt;p&gt;Four years later, we actually have a service like this. I discovered it about a week ago. It&amp;#8217;s called &lt;a href='http://webscript.io'&gt;Webscript&lt;/a&gt;. It&amp;#8217;s basically Scriptlets done right. Webscript is a web app where you can write Lua, hit save, and then you&amp;#8217;ve got little web service. It has basically everything you need to write webhook handler scripts.&lt;/p&gt;

&lt;h3 id='the_ecosystem'&gt;The Ecosystem&lt;/h3&gt;

&lt;p&gt;Slowly, people &lt;em&gt;are&lt;/em&gt; building out pieces of the ecosystem. You could say that the webhooks paradigm was really about this ecosystem. At some point I realized this and decided to give that ecosystem a name. It turned out the ecosystem was really what I was getting at with webhooks. That&amp;#8217;s where the magic was.&lt;/p&gt;

&lt;p&gt;I started calling this ecosystem the Evented Web. Like the Semantic Web and &amp;#8220;programmable web,&amp;#8221; it&amp;#8217;s an umbrella term for a family of technologies coupled with a vision of what the world could be like. The Evented Web envisions a world where the programmable web that we have today of traditional web APIs is complemented by APIs that produce events through webhooks. Adding a callback mechanism to web APIs makes the web more like a giant evented framework.&lt;/p&gt;

&lt;p&gt;Just like with Node.js, perhaps the most popular evented framework, there&amp;#8217;s all kinds of innovation happening in the community. It&amp;#8217;s a new way of thinking about things. Pipes and streams come up a lot in the Node.js world now, and similar sorts of things can be done across web applications with an Evented Web.&lt;/p&gt;

&lt;p&gt;By the time I started talking more about the Evented Web instead of just webhooks, I was already pretty tired of talking about it all. I was sort of &amp;#8220;over it&amp;#8221; and I started to not care if people didn&amp;#8217;t see or share this vision. I continued to think it was cool, but I started to move on to other interests.&lt;/p&gt;

&lt;h3 id='the_future'&gt;The Future&lt;/h3&gt;

&lt;p&gt;These days, the people that really get it are starting to build some really neat things. Webhooks have spread enough that you can at least reference them or the idea of HTTP callbacks and not have to explain yourself. Now is maybe the perfect time for me to put a few specific projects into motion that could at least provide a tangible foundation for building out the Evented Web. Not just vague notions.&lt;/p&gt;

&lt;p&gt;The most immediate thing is a lightweight spec for implementing webhooks. Specifically I mean registering a callback URL and invoking the callback URL. I&amp;#8217;ve intentionally put this off for a lot of reasons. I didn&amp;#8217;t want to get it wrong. I didn&amp;#8217;t want to leave people out. I wanted to capture best practices, which for the longest time we hadn&amp;#8217;t them figured out. But now might be the perfect time because there is a lot on the verge of happening.&lt;/p&gt;

&lt;p&gt;Stay tuned for my proposal for HTTP Subscriptions. It will be the first of several really cool developments for the Evented Web, from me and from others.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Piping into and out of the cloud with skypipe</title>
   <link href="http://progrium.com/blog/2012/09/30/piping-into-and-out-of-the-cloud-with-skypipe"/>
   <updated>2012-09-30T00:00:00-07:00</updated>
   <id>http://progrium.com/blog/2012/09/30/piping-into-and-out-of-the-cloud-with-skypipe</id>
   <content type="html">&lt;p&gt;&lt;a href='https://github.com/progrium/skypipe'&gt;Skypipe&lt;/a&gt; is a magical command line tool that lets you easily pipe data across terminal sessions regardless of whether the sessions are on the same machine, across thousands of machines, or even behind a firewall. It gives you named pipes in the sky and lets you pipe data &lt;em&gt;anywhere&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I built it while on vacation the last couple months. I wasn&amp;#8217;t intending to write software while on my trip, but I just couldn&amp;#8217;t help myself.&lt;/p&gt;

&lt;p&gt;Skypipe is conceptually similar to named pipes or netcat, but with more power and a simpler interface. Here is a basic example using skypipe as you would a regular named pipe to gzip a file across shells:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ skypipe | gzip -9 -c &amp;gt; out.gz&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your skypipe is now ready to receive some data from another shell process:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat file | skypipe&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unlike named pipes, however, &lt;em&gt;this will work across any machines connected to the Internet&lt;/em&gt;. You don&amp;#8217;t have to specify a host address or set up &amp;#8220;listen mode&amp;#8221; like you would with netcat. In fact, unlike netcat, which is point to point, you could use skypipe for log aggregation. Here we&amp;#8217;ll used named skypipes. Run this on several hosts:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tail -f /var/log/somefile | skypipe logs&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then run this on a single machine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ skypipe logs &amp;gt; /var/log/aggregate&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can also broadcast to multiple hosts. With the above, you can &amp;#8220;listen in&amp;#8221; by running this from your laptop, even while behind a NAT:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ skypipe logs&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also temporarily store data or files in the pipe, even several files, until you pull them out. On one machine load some files into a named skypipe:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat file_a | skypipe files
$ cat file_b | skypipe files&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, from somewhere else, pull them out in order:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ skypipe files &amp;gt; new_file_a
$ skypipe files &amp;gt; new_file_b&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, you can use skypipe like the channel primitive in Go for coordinating between shell scripts. As a simple example, we&amp;#8217;ll use skypipe to wait for an event triggered by another script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
echo &amp;quot;I&amp;#39;m going to wait until triggered&amp;quot;
skypipe trigger
echo &amp;quot;I was triggered!&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Triggering is just sending an EOF over the pipe, causing the listening skypipe to terminate. We can do this with a simple idiom:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo | skypipe trigger&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='how_does_this_magic_work'&gt;How does this magic work?&lt;/h3&gt;

&lt;p&gt;You&amp;#8217;ll need a free &lt;a href='https://www.dotcloud.com/'&gt;Dotcloud&lt;/a&gt; account to use skypipe, but you don&amp;#8217;t need to know anything about using Dotcloud to use skypipe.&lt;/p&gt;

&lt;p&gt;When you first use skypipe it will want you to run a setup command (&lt;code&gt;skypipe --setup&lt;/code&gt;). This will deploy a very simple messaging server to Dotcloud. From then on, skypipe will use your account to transparently find and use this server, no matter where you are. The server is managed automatically and runs on Dotcloud free of charge, so you never need to think about it.&lt;/p&gt;

&lt;h3 id='software_with_a_service'&gt;Software with a service!&lt;/h3&gt;

&lt;p&gt;This is a new paradigm of creating tools that transparently leverage the cloud to create magical experiences. It&amp;#8217;s not quite software as a service, it&amp;#8217;s software &lt;em&gt;with&lt;/em&gt; a service. Nobody is using a shared, central server, and no one needs to setup or manage their own server. The &lt;em&gt;software&lt;/em&gt; deploys and manages its own server for you.&lt;/p&gt;

&lt;p&gt;Thanks to platforms like Heroku and Dotcloud, we can now build software leveraging features of software as a service that is &lt;em&gt;packaged and distributed like normal open source software&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m excited to see what else can be done with this pattern. Naturally, I&amp;#8217;m already thinking about a number of other potential uses.&lt;/p&gt;

&lt;h3 id='using_skypipe_and_getting_involved'&gt;Using skypipe and getting involved&lt;/h3&gt;

&lt;p&gt;Skypipe is still an alpha piece of software. Be warned, there are some rough edges. That said, you can install skypipe with pip:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install skypipe&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The user experience is not yet entirely optimized. One of the biggest issues is that it needs to check for the server on every use. This can be done less often and cached, which would make it much snappier and on par with most command line utilities.&lt;/p&gt;

&lt;p&gt;This and a few other issues are already tracked in &lt;a href='https://github.com/progrium/skypipe/issues'&gt;Github Issues&lt;/a&gt;; feel free to take a whack at them. The codebase is intentionally small, documented, and written to be read, although there are no tests yet.&lt;/p&gt;

&lt;p&gt;The project also depends on ZeroMQ, which requires a C extension to be compiled. Even using the pyzmq-static package, you still need certain header files (python.h at the very least) to install skypipe, and not every environment has these. Ideally, I&amp;#8217;d like to find a way to package skypipe in a way that includes all its dependencies. Perhaps &lt;a href='http://www.pyinstaller.org/'&gt;PyInstaller&lt;/a&gt; can help with this.&lt;/p&gt;

&lt;p&gt;Another feature I&amp;#8217;m sure a lot of people will want (or complain about) is being able to run your own server and ignore the software with a service aspect. Since the server is packaged with the client, this is not far off from happening. Somebody just needs to make it happen.&lt;/p&gt;

&lt;p&gt;Contribution ideas aside, I&amp;#8217;m hoping skypipe will be useful to others besides myself. I was really going for a magical tool. I think a big part of this magic is the use of software with a service, which I consider a bit novel in itself. What do you think?&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Let me tell you about my website</title>
   <link href="http://progrium.com/blog/2012/09/07/let-me-tell-you-about-my-website"/>
   <updated>2012-09-07T00:00:00-07:00</updated>
   <id>http://progrium.com/blog/2012/09/07/let-me-tell-you-about-my-website</id>
   <content type="html">&lt;p&gt;Since mid-July I&amp;#8217;ve been on vacation traveling around the world. Originally, the only project I allowed myself to work on is my website and blog. I quickly broke that rule with a number of new and existing projects. Nevertheless, as you can see, I did ship this site.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve never been happy with my website or blog, perhaps because I&amp;#8217;ve never been able to invest enough time into it. Over the years, I&amp;#8217;ve at least been able to put a lot of thought into what I want and how I want to express myself. This attempt gets pretty close.&lt;/p&gt;

&lt;h3 id='highlevel_goals'&gt;High-level Goals&lt;/h3&gt;

&lt;p&gt;Too many of my personal site designs have been dark and gloomy, often monochromatic. I think one of the biggest ideas going into this project was to make something bright and colorful. From a pure functional standpoint, I felt this was important. I also wanted to actually reflect my style. Too often I&amp;#8217;ve settled for pre-designed blog themes that &amp;#8220;kinda, sorta&amp;#8221; match my sense of style and how I want to express myself. This time I would have full control.&lt;/p&gt;

&lt;p&gt;As I&amp;#8217;m starting to freelance again, I also wanted to have a good marketing tool for myself. Even if it just expressed the affordances I have as a free agent. If somebody discovered me online, they&amp;#8217;d know they could buy my time. &amp;#8220;Yes, I can be hired for any of these fine services.&amp;#8221;&lt;/p&gt;

&lt;p&gt;Combining my personal website with my blog is another thing I wanted to do. So far they&amp;#8217;ve always been separate. Not only would this be for consistency and simplicity, but for future proofing. Anything else I want to put online I can do with this site in a way that feels part of a whole. A whole that represents my identity and personal brand.&lt;/p&gt;

&lt;h3 id='aesthetic'&gt;Aesthetic&lt;/h3&gt;

&lt;p&gt;Like I mentioned, I wanted bright and colorful. I also wanted simple and toy-like. I wanted it to feel well designed, but without a lot of modern web design tropes. This led to a minimalist foundation that I could sprinkle my favorite motifs on top of.&lt;/p&gt;

&lt;p&gt;I actually only had one website in mind that I used for initial inspiration. In fact, I think when I came across &lt;a href='http://disqus.com/for-websites/awesome-ux'&gt;this page of the Disqus website&lt;/a&gt;, I immediately started imagining a new personal website. Most of that initial vision has since disappeared, but with that framing I was able to move on to colors.&lt;/p&gt;

&lt;p&gt;The colors on that page reminded me of one of my favorite kinds of infographics: transit maps. I quickly started poking around ColourLovers for palettes inspired by transit maps. I found a few and settled on &lt;a href='http://www.colourlovers.com/palette/1043750/Tokyo_Subway'&gt;one based on Tokyo&amp;#8217;s subway map&lt;/a&gt;. Then I moved on to typeface.&lt;/p&gt;

&lt;p&gt;I limited my options to what was available on Google Webfonts. Previously I was a fan of the Droid Sans and Droid Serif families. This time around, I used Open Sans as the primary font. For the header title (my name), I needed something different. I wanted something heavier but not wide. Ideally, I wanted a bold Futura Condensed, but a heavy Futura isn&amp;#8217;t on Google Webfonts.&lt;/p&gt;

&lt;p&gt;I struggled with this for a while, then by accident found VT323. It had the weight and shape qualities I was looking for, but I didn&amp;#8217;t think I wanted a pixelated typeface. It seemed too cliche. However, when I tried it, it became obvious VT323 not only went well with my pixelated avatar, but it added more of me to the overall design without being too cliche.&lt;/p&gt;

&lt;p&gt;The tree in the header was a late addition. I have a thing for trees as a symbol of nature and I wanted to add more character to the design. Originally I was going to use Context Free to create a procedurally generated tree, but this proved too time consuming to get what I wanted. A free vector based tree was not hard to find.&lt;/p&gt;

&lt;h3 id='platform'&gt;Platform&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;ve become a fan of using &lt;a href='http://pages.github.com/'&gt;GitHub Pages&lt;/a&gt; for simple websites. It&amp;#8217;s hosted, it&amp;#8217;s free, and powered by Git. The site is then versioned, editable online, and even forkable. The only limitation is that it only hosts static files.&lt;/p&gt;

&lt;p&gt;Luckily, they&amp;#8217;ve built-in support for &lt;a href='https://github.com/mojombo/jekyll'&gt;Jekyll&lt;/a&gt;, which is more or less like pre-rendering a dynamic site. This not only gives you templating, layouts, and includes, but it&amp;#8217;s &amp;#8220;blog aware&amp;#8221; so you get pagination, meta-data, and even related post links. The only real dynamic bits of the site are blog comments and analytics, both are solved by client-side JavaScript powered services. Neither of those I care to have in my Git repo anyway.&lt;/p&gt;

&lt;p&gt;The other part of this plan I like is that it lets you write content in simple Markdown files kept in a Git repo. If I ever need, I can take this repo anywhere and still have my blog posts as Markdown files. This is a far more ideal place to be in that most blogging platforms I&amp;#8217;ve used in the past.&lt;/p&gt;

&lt;h3 id='future'&gt;Future&lt;/h3&gt;

&lt;p&gt;It&amp;#8217;s still a work in progress. You may have noticed the homepage currently redirects to the blog index. I&amp;#8217;m hoping to have more of a landing or intro page as the homepage. The idea there is to quickly communicate what I&amp;#8217;m about and what I work on.&lt;/p&gt;

&lt;p&gt;I also want to incorporate more hand-drawn elements into the design. A lot of my writing is well accompanied by diagrams and visuals, so I wanted to include more of these in my posts. Doing as many of these as I can with my drawing tablet will give the site more character. My character.&lt;/p&gt;

&lt;p&gt;I was also thinking about &amp;#8220;project pages&amp;#8221; that describe and introduce the projects I&amp;#8217;m involved in without being hidden as an old blog post. Perhaps more exciting, though, are project idea pages or &amp;#8220;blueprints&amp;#8221;. These would allow me to document projects I&amp;#8217;m thinking about building, letting me get feedback and encourage collaboration before even starting.&lt;/p&gt;

&lt;p&gt;Building a site from scratch was a pretty substantial investment. With the right tools and enough time to think through and iterate on the visual design, I now have something that works and that I can build on as needed. Not only that, I shipped before I got back from vacation. :)&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Making a local web server public with localtunnel</title>
   <link href="http://progrium.com/blog/2010/05/11/making-a-local-web-server-public-with-localtunnel"/>
   <updated>2010-05-11T00:00:00-07:00</updated>
   <id>http://progrium.com/blog/2010/05/11/making-a-local-web-server-public-with-localtunnel</id>
   <content type="html">&lt;p&gt;These days it&amp;#8217;s fairly common to run a local environment for web development. Whether you&amp;#8217;re running Apache, Mongrel, or the App Engine SDK, we&amp;#8217;re all starting to see the benefits of having a production-like environment right there on your laptop so you can iteratively code and debug your app without deploying live, or even needing the Internet.&lt;/p&gt;

&lt;p&gt;However, with the growing popularity of callbacks and &lt;a href='http://webhooks.org'&gt;webhooks&lt;/a&gt;, you can only really debug if your script is live and on the Internet. There are also other cases where you need to make what are normally private and/or local web servers public, such as various kinds of testing or quick public demos. Demos are a surprisingly common case, especially for multi-user systems (&amp;#8220;Man, I wish I could have you join this chat room app I&amp;#8217;m working on, but it&amp;#8217;s only running on my laptop&amp;#8221;).&lt;/p&gt;

&lt;p&gt;The solution is obvious, right? SSH remote forwarding, or reverse tunneling. Use a magical set of options with SSH with a public server you have SSH access to, and set up a tunnel from that machine to your local machine. When people connect to a port on your public machine, it gets forwarded to a local port on your machine, looking as if that port was on a public IP.&lt;/p&gt;

&lt;p&gt;The idea is great, but it&amp;#8217;s a hassle to set up. You need to make sure sshd is set up properly in order to make a public tunnel on the remote machine, or you need to set up two tunnels, one from your machine to a private port on the remote machine, and then another on the remote machine from a public port to the private port (that forwards to your machine).&lt;/p&gt;

&lt;p&gt;In short, it&amp;#8217;s too much of a hassle to consider it a quick and easy option. Here is the quick and easy option:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ localtunnel 8080&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you&amp;#8217;re done! With localtunnel, it&amp;#8217;s so simple to set this up, it&amp;#8217;s almost fun to do. What&amp;#8217;s more is that the publicly accessible URL has a nice hostname and uses port 80, no matter what port its on locally. And it tells you what this URL is when you start localtunnel:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ localtunnel 8080
Port 8080 is now publicly accessible from http://8bv2.localtunnel.com ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What&amp;#8217;s going on behind the scenes is a web server component running on localtunnel.com. It serves two purposes: a virtual host reverse proxy to the port forward, and a tunnel register API (try going to &lt;a href='http://open.localtunnel.com'&gt;http://open.localtunnel.com&lt;/a&gt;). This simple API allocates a port to tunnel on, and gives the localtunnel client command the information it needs to set up an SSH tunnel for you. The localtunnel command just wraps an SSH library and does this register call.&lt;/p&gt;

&lt;p&gt;Of course, there&amp;#8217;s also the authentication part. As a free, public service, we don&amp;#8217;t want to just give everybody SSH access to this machine (as it may seem). The user localtunnel on that box is made just for this service. It has no shell. It only has a home directory with an authorized_keys file. We require you to upload a public key for authentication, and we also mark that key with options that say you can only do port forwarding. Although, it can&amp;#8217;t be used for arbitrary port forwarding&amp;#8230; because it&amp;#8217;s only a private port on the remote side, it can only be used with the special reverse proxy.&lt;/p&gt;

&lt;p&gt;So there it is. &lt;a href='http://github.com/progrium/localtunnel'&gt;And the code is on GitHub.&lt;/a&gt; You might notice the server is in Python and the client in Ruby. Why? It just made sense. Python has Twisted, which I like for server stuff. And Ruby is great for command line scripts, and has a nice SSH library. In the end, it doesn&amp;#8217;t matter what it&amp;#8217;s written in. Ultimately it&amp;#8217;s a Unix program.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Learning from expectation disparity, aka "failure"</title>
   <link href="http://progrium.com/blog/2010/02/02/learning-from-disparity-aka-failure"/>
   <updated>2010-02-02T00:00:00-08:00</updated>
   <id>http://progrium.com/blog/2010/02/02/learning-from-disparity-aka-failure</id>
   <content type="html">&lt;p&gt;I&amp;#8217;ve long argued that failure is the only way a person can learn. This has been a very resonating bit of wisdom for me, despite the fact people have often argued against it with rather sound logic: &amp;#8220;Yes, you can learn from failure, but you can also learn from success!&amp;#8221; Only after reading Jason Fried&amp;#8217;s blog post from one year ago, &lt;a href='http://37signals.com/svn/posts/1555-learning-from-failure-is-overrated'&gt;Learning from failure is overrated&lt;/a&gt;, have I realized exactly what&amp;#8217;s wrong. We&amp;#8217;re talking about different kinds of failure.&lt;/p&gt;

&lt;p&gt;Learning happens when you correct the mismatch of an expected outcome from the actual outcome. This is where the idea of learning from failure actually comes from. Failure represents a mistake in judgment, a disparity between expectation and reality. Therefore, if your expectation is validated by success and there is no disparity, then you didn&amp;#8217;t actually &lt;em&gt;learn&lt;/em&gt; anything &amp;#8212; you already knew.&lt;/p&gt;

&lt;p&gt;However, validation of an expected but &lt;em&gt;unsure&lt;/em&gt; success is obviously learning because it corrects the expectation of doubt you had. Furthermore, analysis of an unexpected success can result in learning from correcting the assumptions that led to expecting failure. A successful outcome, but a failure to expect it.&lt;/p&gt;

&lt;p&gt;This is where the confusion comes in. Unfortunately it&amp;#8217;s an issue of semantics. The meaning of the word failure in the context of &amp;#8220;learning from failure&amp;#8221; is this failure to know the outcome. In this way, it&amp;#8217;s true, you can only learn from failure. However, it is only this specific instance of expectation-failure this applies to so absolutely.&lt;/p&gt;

&lt;p&gt;Separately although related (which I think adds to the confusion), despite outcome-failures not necessarily teaching you what will work, they tend to be the strongest lessons experienced. I mostly attribute this to the greater level of disparity and correction made to your mental model that comes from expecting a failing outcome to succeed.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Notify.io brings notifications to the web</title>
   <link href="http://progrium.com/blog/2010/01/26/notifyio-brings-notifications-to-the-web"/>
   <updated>2010-01-26T00:00:00-08:00</updated>
   <id>http://progrium.com/blog/2010/01/26/notifyio-brings-notifications-to-the-web</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Notify.io is currently out of service as it is being re-imagined in smaller pieces based on open standards. Contact me for more information.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In October 2009 I started a project called &lt;a href='http://www.notify.io/'&gt;Notify.io&lt;/a&gt; and a month later announced it. I talked about how it will bring notifications to the web. Now that it&amp;#8217;s basically alpha complete, I&amp;#8217;ll give you a quick walkthrough of what makes it so great.&lt;/p&gt;
&lt;center&gt;&lt;iframe frameborder='0' height='315' src='http://www.youtube.com/embed/Fs9NauQ2M6o' width='560'&gt; &lt;/iframe&gt;&lt;/center&gt;
&lt;h3 id='overview'&gt;Overview&lt;/h3&gt;

&lt;p&gt;At a really high level, you can think of Notify.io as a notification router. As a web service, it provides a singleton endpoint for any web-connected program, whether a web application, desktop application or user script, to send notifications to somebody. For users, you can control what notifications you get and how you get them. In this way, Notify.io is like a global, web-accessable version of the popular &lt;a href='http://growl.info/'&gt;Growl&lt;/a&gt; application for OS X (which should honestly just ship with OS X). Only it&amp;#8217;s even better.&lt;/p&gt;

&lt;h3 id='desktop_notifications'&gt;Desktop Notifications&lt;/h3&gt;

&lt;p&gt;The original inspiration for Notify.io was to make Growl more useful by fixing its ability to receive notifications from the Internet. Out of the box, Growl is effectively only good for notifications from sources running on your machine. If you wanted to get notifications from a web app, you&amp;#8217;d have to wait for them to release a desktop notifier, which hopefully would use Growl to actually display the notifications. So you end up with all these desktop notifiers running for some apps, and have no option of desktop notifications for others.&lt;/p&gt;

&lt;p&gt;This is probably the killer feature of Notify.io: it lets you get desktop notifications from any web app that supports it, which is an order of magnatude easier for them to do than build their own desktop notifier.&lt;/p&gt;

&lt;h3 id='sources_and_outlets'&gt;Sources and Outlets&lt;/h3&gt;

&lt;p&gt;The language of Notify.io is based around Sources and Outlets. Sources are pretty straightforward. They&amp;#8217;re a source of notifications. They could represent an application, script, company, person (or perhaps object?) that can send you notifications.&lt;/p&gt;

&lt;p&gt;Outlets repesent the other major feature of Notify.io. They&amp;#8217;re ways you can get a notification. The Desktop Notifier is your first and default outlet, but is just one of several options. Currently supported Outlets besides Desktop Notifier are Email, Jabber IM, and Webhooks. Outlets to look forward to are SMS, Twitter, IRC, and perhaps telephone.&lt;/p&gt;

&lt;p&gt;The magic is in routing notifications from Sources to Outlets. Currently this is a simple mapping of Source to Outlet. For example, you can get notifications from Source A on your desktop, while notifications from Source B go to IM. This simplistic routing is just the beginning. We&amp;#8217;ll talk about how we&amp;#8217;ll do advanced routing when we get to the Roadmap.&lt;/p&gt;

&lt;h3 id='the_nio_client'&gt;The Nio Client&lt;/h3&gt;

&lt;p&gt;For developers, it&amp;#8217;s worth mentioning that the pipe for our Desktop Notifier is really just a Comet HTTP stream. It can be consumed by pretty much anything. We were originally talking with Growl and authors of other desktop notifiers of direct integration. This is still a possibility, but just so we could move forward, we built our own client for OS X. Clients for other systems are available (but not yet &amp;#8220;officially&amp;#8221; supported) or are in progress, including Windows and Android.&lt;/p&gt;

&lt;p&gt;Our OS X client is called Nio, short for Notify.io, so you can pronounce it N-I-O, but I tend to pronounce it &amp;#8220;neo&amp;#8221;. It&amp;#8217;s basically just an application that sits in your menu bar listening to HTTP streams (yes, plural) for notifications and pipes them into Growl.&lt;/p&gt;

&lt;p&gt;For ease of installing streams, we made it handle files of the extension ListenURL. Once Nio is installed, you can download a ListenURL file containing a URL and it gets installed by Nio. The URL we give you is basically a &amp;#8220;capability URL&amp;#8221; or secret URL. This means streams are not super secure, but this is by design. If you wanted, you could share your URL with somebody so you both get notifications sent to that Outlet. You can always delete the Outlet and make another to disable that URL.&lt;/p&gt;

&lt;p&gt;The other cool thing about our client is that it has a shell script notification hook. This means you can have notifications trigger a shell script that&amp;#8217;s passed the notification details. This is pretty powerful because it means you can do things like create your own local logging, hear your notifications with text-to-speech, or make certain notifications trigger a more obstrusive means of notifying you, such as Quicksilver&amp;#8217;s Large Type feature. This kind of programmability is central to our approach to design, as you&amp;#8217;ll see later on in the Roadmap.&lt;/p&gt;

&lt;h3 id='simple_api_and_approval_model'&gt;Simple API and Approval Model&lt;/h3&gt;

&lt;p&gt;For proper adoption, we need web apps to integrate Notify.io, so we have a super simple API for Sources. It&amp;#8217;s a simple REST API based on an endpoint constructed by the target of your notification. Like &lt;a href='http://en.gravatar.com/'&gt;Gravatar&lt;/a&gt;, we use an MD5 hash of a user&amp;#8217;s email address to identify targets. For example, to send a notification to test@example.com, you&amp;#8217;d do an HTTP POST to this URL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://api.notify.io/v1/notify/55502f40dc8b7c769880b10874abc9d0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;#8217;d pass a few parameters, with at least your API key (meaning you need an account) and the text you want to send, and optionally an icon URL, link URL, title text and whether the notification should be &amp;#8220;sticky&amp;#8221;. That&amp;#8217;s it. The request should respond immediately so it may be quick enough to be done inline in your app, but we recommend it be done asynchronously.&lt;/p&gt;

&lt;p&gt;Then what happens is the first notification you send actually triggers a notification to that user that you want to send them notifications. If they accept, future notifications will be sent and your previous notifications will show up in their history. This may change to replay previous notifications on approval, but the point here is the user has to approve notifications before they get them. In this way, it&amp;#8217;s similar to Jabber&amp;#8217;s approval model and helps avoid spammers.&lt;/p&gt;

&lt;h3 id='public_service_software'&gt;Public Service Software&lt;/h3&gt;

&lt;p&gt;&lt;a href='http://code.google.com/p/notify-io/'&gt;Notify.io and its clients are open source&lt;/a&gt;. The service is free. Or rather, it&amp;#8217;s not-for-profit donationware. Notify.io is being run under a model I&amp;#8217;m developing called POSS, the goal of which is to automate/abstract away the maintainence and funding of its operation. The end result should be: the service exists, it&amp;#8217;s open source, and some in the developer community can deploy changes. But no single person is financially responsible for it, and it&amp;#8217;s run on maintained cloud infrastructure. In this case it&amp;#8217;s mostly App Engine.&lt;/p&gt;

&lt;p&gt;This means that Notify.io is not a startup. It&amp;#8217;s public infrastructure. Ideally, I&amp;#8217;m not even in the loop. It should be a self-sustaining public service. This is not fully realized, but it will be as it starts to consume more resources. For more information, you can &lt;a href='http://blogrium.wordpress.com/2009/10/29/public-open-source-services/'&gt;read more&lt;/a&gt; on POSS or &lt;a href='http://groups.google.com/group/poss-talk'&gt;join our discussion group&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For now, the important thing is that Notify.io is open source. This means anybody can contribute bug fixes, new outlets, new desktop clients, etc.&lt;/p&gt;

&lt;h3 id='roadmap'&gt;Roadmap&lt;/h3&gt;

&lt;p&gt;Okay, sure, Notify.io is pretty cool now. But here are some of the major things that will be coming soon. Hopefully with your help!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Advanced Routing and Filters&lt;/em&gt;&lt;br /&gt; From the beginning, I wanted really powerful routing and filtering. My evangelism of webhooks has given me the obvious answer to this, but in a more integrated way. Basically, how do you allow any routing scheme imagineable by users? Let them write code. Originally it was going to be powered by &lt;a href='http://www.scriptlets.org/'&gt;Scriptlets&lt;/a&gt;, but since I split the eval engine out as &lt;a href='http://github.com/progrium/DrEval'&gt;DrEval&lt;/a&gt;, it will be based on that.&lt;/p&gt;

&lt;p&gt;Basically, just a imagine a UI with a little textarea for writing JavaScript that can make web calls. Route notifications based on your IM status, your location, what music you&amp;#8217;re listening to, arbitrary time schedules, or anything you can code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;More Outlets&lt;/em&gt;&lt;br /&gt; Obviously, more Outlets are good. Obvious ones are IRC, SMS, and Twitter DM. With Twilio we can do voice call notifications. Integration with push clients like the iPhone&amp;#8217;s Prowl app would be easy to do. Our outlet system is very simple, so you can &lt;a href='http://github.com/progrium/notify-io/blob/master/www/outlet_types.py'&gt;look at the source of our existing ones&lt;/a&gt;, write an outlet and it&amp;#8217;s likely we&amp;#8217;ll deploy it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;OpenID Support&lt;/em&gt;&lt;br /&gt; Right now, you authenticate with Google. I don&amp;#8217;t believe in creating authentication systems, and Google was the quickest given the platform. It&amp;#8217;s also pretty popular and ensures you have an email address we can use. However, there are plenty of people that don&amp;#8217;t like the idea of using their Google Account, so at some point we&amp;#8217;ll support OpenID login and then go from there.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Multiple Email Support&lt;/em&gt;&lt;br /&gt; Ideally, a web app can use whatever email address you used to register with them to send you notifications. However, unless Gmail is your primary email you use for registration, they&amp;#8217;ll still need to ask you for your email. It&amp;#8217;s the Gravatar model. So like Gravatar, we&amp;#8217;ll need to let you add multiple emails to your account, allowing web applications to be able to send notifications based on any of them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Convenience Libraries&lt;/em&gt;&lt;br /&gt; Our API is simple, but people are lazy. We&amp;#8217;re currently working on convenience libraries for popular langauges that it make that much easier to integrate with Notify.io. If you use a neat language, you should make a libnio package for it!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ad-hoc Sources&lt;/em&gt;&lt;br /&gt; Sources require an account, which is a bit heavyweight. Sometimes you want to create your own distinct sources to share with others or use in your scripts to easily send yourself notifications. This is the idea of Ad-hoc Sources, inspired by David Reid and capability URLs. The idea is simple: create an ad-hoc source and you get a secret URL. This URL acts just like the notify API endpoint, only you don&amp;#8217;t need an API key. You can use this in public scripts or give it to others to send you notifications, and if it&amp;#8217;s ever abused or falls in the wrong hands, just delete it and make another.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;More Supported Clients&lt;/em&gt;&lt;br /&gt; A developer in Japan started a Windows client based on Nio that we&amp;#8217;re planning to support as our primary Windows client. Another developer is working on an Android client. iPhone users have Prowl, so once there is a Prowl outlet, you can get them on your iPhone. But Prowl is not free, so perhaps it would be helpful if we had our own iPhone client. There are the beginnings of a Linux/libnotify client. These are all ways you can start contributing to Notify.io. ;)&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s about it. You can probably see why I describe Notify.io as the open notification platform of the web. It&amp;#8217;s simple, powerful, and open source. It&amp;#8217;s come a long way in just 3 months thanks to the contributions of Abimanyu Raja, Amanda Wixted, Mike Lundy, David Reid, Christopher Lobay, Hunter Gillane, Nakamatsu Shinji, and everybody that&amp;#8217;s given user feedback so far.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Hacker Dojo: place of the way of the hacker</title>
   <link href="http://progrium.com/blog/2009/12/08/hacker-dojo-place-of-the-way-of-the-hacker"/>
   <updated>2009-12-08T00:00:00-08:00</updated>
   <id>http://progrium.com/blog/2009/12/08/hacker-dojo-place-of-the-way-of-the-hacker</id>
   <content type="html">&lt;p&gt;Two weeks ago it was being taped for a story on Fox News. One month ago it received a congratulatory visit from the mayor of Mountain View. Two months ago it was featured on &lt;a href='http://www.flickr.com/photos/progrium/4017351989/'&gt;the front page&lt;/a&gt; of the Mercury News. And four months ago was when we signed the lease for it. Hacker Dojo is officially on its way to something big.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://hackerdojo.com'&gt;Hacker Dojo&lt;/a&gt;, aspiring to be a global hub of innovation, is based on a simple idea: to provide a community center for hackers, thinkers and technologists to meet, discuss, learn and create.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s a non-profit, volunteer-run, member-supported operation that simply provides a space for hackers to do their thing 24/7, whether it&amp;#8217;s working on side projects, organizing a meetup, building the next startup, giving a class, working remotely, or just hanging out with diverse yet like-minded people. The thing they have in common is the hacker spirit, a force that drives ordinary but curious people to create what can end up being extraordinary, such as the personal computer, the first video game system, or the technology powering the Internet.&lt;/p&gt;

&lt;p&gt;A dojo is considered a place to do and train one&amp;#8217;s craft with others. It&amp;#8217;s most commonly used in the context of martial arts or other physical training. But the word &amp;#8220;dojo&amp;#8221; is simply defined as &amp;#8220;place of the way.&amp;#8221; In the case of Hacker Dojo, that way is the way of the hacker.&lt;/p&gt;

&lt;p&gt;The hacker is not what most people think. Although 99% of the 100+ members of Hacker Dojo are capable of doing the things most people think &amp;#8220;hackers&amp;#8221; do, I&amp;#8217;m 100% positive none of us have the intention of doing those things maliciously if at all. In fact, security has almost nothing to do with the way of the hacker. We define a hacker something like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A hacker is expert in their field, whether hobby or professional, that pushes the envelope of what&amp;#8217;s possible through hands-on exploration, driven by relentless curiosity and a desire to challenge the status quo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Steven Levy, author of &lt;a href='http://www.amazon.com/Hackers-Computer-Revolution-Steven-Levy/dp/0141000511'&gt;Hackers: Heroes of the Computer Revolution&lt;/a&gt;, describes computer hackers as people that &amp;#8220;regard computing as the most important thing in the world.&amp;#8221; It&amp;#8217;s about passion. It&amp;#8217;s about something most of us can&amp;#8217;t even describe. It inexplicably compels us to explore technology. To build things. To learn things. To be like the heroes in our field and achieve the remarkable, which is something I think everybody can relate to.&lt;/p&gt;

&lt;p&gt;In fact, there is no reason why anybody shouldn&amp;#8217;t aspire to be like a hacker, an innovator. This is what Hacker Dojo is about. We want to foster hacker culture so it can grow, develop and spread. We want to make its values explicit, and be the &amp;#8220;place of the way&amp;#8221; of the hacker.&lt;/p&gt;

&lt;p&gt;If you still don&amp;#8217;t understand the hacker, or want to learn more, take a look at the &lt;a href='http://en.wikipedia.org/wiki/Hacker_ethic'&gt;Hacker ethic article&lt;/a&gt; on Wikipedia. There&amp;#8217;s also an excellent, short documentary available to watch online that shows you the energy and excitement of true hackers called &lt;a href='http://www.youtube.com/view_play_list?p=906FF3F2339D0C70'&gt;Hackers: Wizards of the Electronic Age&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to get involved in Hacker Dojo, come stop by or &lt;a href='http://hackerdojo.com/'&gt;visit the website&lt;/a&gt;! We hold many events at the Dojo, but it&amp;#8217;s also generally open for anybody to come and hack. If you&amp;#8217;re too far to come to us, you may find another &lt;a href='http://en.wikipedia.org/wiki/Hackerspace'&gt;hackerspace&lt;/a&gt; nearby. For example, in SF there is the excellent &lt;a href='https://www.noisebridge.net/wiki/Noisebridge'&gt;Noisebridge&lt;/a&gt; hackerspace.&lt;/p&gt;

&lt;p&gt;When you&amp;#8217;re this obsessed with technology, so much that most &amp;#8220;normal&amp;#8221; people have no idea what you&amp;#8217;re talking about, it helps to have a place where people don&amp;#8217;t think you&amp;#8217;re crazy. People have moved to Mountain View to be closer to Hacker Dojo. If you already live nearby, you should definitely take advantage of this place of the way of the hacker.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Why efficiency is not as important as you think</title>
   <link href="http://progrium.com/blog/2009/11/05/why-efficiency-is-not-as-important-as-you-think"/>
   <updated>2009-11-05T00:00:00-08:00</updated>
   <id>http://progrium.com/blog/2009/11/05/why-efficiency-is-not-as-important-as-you-think</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Efficiency is doing things right; effectiveness is doing the right things.&amp;#8221; -Peter Drucker&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When people, usually analytical people, want to improve a situation, they tend to optimize efficiency: achieve maximum output for input. &amp;#8220;Let&amp;#8217;s reduce waste! Let&amp;#8217;s simplify! Let&amp;#8217;s make things smoother! Let&amp;#8217;s try and get more out of the system!&amp;#8221; I suppose the obsession with efficiency is explained in the Drucker quote: that efficiency is &amp;#8220;doing things right.&amp;#8221; Who wouldn&amp;#8217;t want to do things right?&lt;/p&gt;

&lt;p&gt;The problem with efficiency is that it has nothing to do with whether or not what you are currently doing is the right thing to do. Whereas effectiveness is about achieving the right result, or being on the right path.&lt;/p&gt;

&lt;p&gt;Too many people assume a system is on the right path. If there is a problem, they address it by smoothing things out and making the process more efficient without questioning the larger system they were produced in. But if the system is going in the wrong direction, that&amp;#8217;s only going to make the real problem worse. The push for more standardized testing in public education comes to mind.&lt;/p&gt;

&lt;p&gt;What&amp;#8217;s really important is effectiveness. In the end, it doesn&amp;#8217;t matter if your business is spending the least amount possible or your computer program running as fast as possible or your lifestyle entirely streamlined. If it&amp;#8217;s effective, it achieves the desired goal. Your business is producing value, your program is functionally useful, your lifestyle is making you happy. Effectiveness is qualitative. Efficiency is quantitative, which is why I think it&amp;#8217;s so big with analytical people. Probably intelligent people in general.&lt;/p&gt;

&lt;p&gt;If you think about it, intelligence, especially knowledge, is mostly concerned with efficiency. It&amp;#8217;s more about how to solve problems, less so with what problems to solve. Knowledge is a tool. It&amp;#8217;s neutral. To what ends do you actually use it for? That requires values and intention&amp;#8212;the realm of wisdom. A wise person tends to be an effective person.&lt;/p&gt;

&lt;p&gt;When approaching a problem, wisdom and pragmatism must frame intelligence. Before you start thinking about efficiency, you should step back and think about effectiveness. In computer engineering this idea spread with Donald Knuth&amp;#8217;s quote &amp;#8220;premature optimization is the root of all evil.&amp;#8221; His argument being that 97% of efficiency optimizations are unnecessary to achieve functionality, at which point you can determine which optimizations will be the most effective improvements of efficiency.&lt;/p&gt;

&lt;p&gt;In a way, it&amp;#8217;s a look before you leap argument. Don&amp;#8217;t get me wrong with all this. Efficiency is terribly valuable and can improve a situation, but only if you&amp;#8217;re on the right path. Just because a system is currently working or was previously working doesn&amp;#8217;t mean it should be, or will in the future. You should always consider effectiveness before efficiency, even in &amp;#8220;working&amp;#8221; systems. Here&amp;#8217;s why:&lt;/p&gt;

&lt;p&gt;Effectiveness opens the door for efficiency, but efficiency can change the requirements for effectiveness.&lt;/p&gt;

&lt;p&gt;Quantitative improvements can qualitatively change the situation if taken far enough. The game can change. For example, you can become so efficient at producing cars that production isn&amp;#8217;t the problem anymore. Then it&amp;#8217;s a question of variety, like choice of color. &amp;#8220;You can have any color as long as that color is black,&amp;#8221; Ford said, and soon after lost the lead in car manufacturing. Perhaps when business slowed, they tried to make their sales and marketing or administrative organization more efficient. They didn&amp;#8217;t re-asses whether the thing they were doing so right (building cars so efficiently)&amp;#8230; was the right thing. The effective thing.&lt;/p&gt;

&lt;p&gt;Efficiency is important, but powerless without effectiveness. Always keep an eye on effectiveness.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Public Open Source Services</title>
   <link href="http://progrium.com/blog/2009/10/29/public-open-source-services"/>
   <updated>2009-10-29T00:00:00-07:00</updated>
   <id>http://progrium.com/blog/2009/10/29/public-open-source-services</id>
   <content type="html">&lt;p&gt;Last night I went off and put up a wiki about an idea I&amp;#8217;ve been thinking about for a while: &lt;a href='http://poss.gliderlab.com/'&gt;public open source services&lt;/a&gt; or POSS. Think: public services or utilities on the web run as open source.&lt;/p&gt;

&lt;p&gt;Unlike open source software, web services aren&amp;#8217;t just source code. They&amp;#8217;re source code that &lt;em&gt;runs&lt;/em&gt;. They have to be maintained in order to keep running, and the resources they consume have to be paid for. This is why most web services are built using a business as the vehicle. This effectively constrains what you can build by framing it as something that needs to turn a profit or support you to work on it. But does it need to be that way? Can web services be built in a way that make it self-sufficient? Not needing some ambivalent leader to take responsibility for it?&lt;/p&gt;

&lt;p&gt;I originally blogged about it in February 2007, 6 months after I first wrote about webhooks. Unfortunately my old blog isn&amp;#8217;t online right now. Back then, I was trying to solve the administrative problem. How do you maintain the servers in an open source way? My idea then, was to build a self-managing system using something like cfengine or Puppet, where the recipes and configurations are kept with the publicly available source code. As new configurations are checked in, the server(s) adopt the new directives and continue to self-manage.&lt;/p&gt;

&lt;p&gt;The practicality of such a setup is a little far fetched, but seemed pretty feasible for smaller projects. However, since the release of Google App Engine, this concern for simple web applications has disappeared. Google just automates the system administration, and scaling! This means to run the app, you just have to write the code and hit deploy. That&amp;#8217;s a huge step! Administration concerns? Pretty much solved.&lt;/p&gt;

&lt;p&gt;The next thing is the financial concern. How do you pay for it? Or rather, how does it pay for itself? This took longer to figure out, but here we are. From the wiki essay:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You use the same Google Merchant account that App Engine debits as the one that accepts donations. This way no bank account is involved. Then you track the money that goes into the account (using the Google Merchant IPN equivalent). Then you look at your usage stats from the App Engine panel and predicate future usage trends. Then calculate the cost per month. Then divide the cash in the account by that and you have how long the service will run. You make this visible on all pages (at the bottom, say) that this service will run for X months, &amp;#8220;Pay now to keep it running.&amp;#8221; You accept any amount, but you are completely clear about what the costs are. And this is all automated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take the humans out of the loop!&lt;/p&gt;

&lt;p&gt;Then you rely on the same sort of community approach of open source to contribute to the application. Like a few members of the project community are given certain rights, some will be given permission to deploy the app from time to time for updating the running service.&lt;/p&gt;

&lt;p&gt;If the service isn&amp;#8217;t useful, nobody uses it, it&amp;#8217;s not paid for, it disappears. If it is useful, people will pay for it to keep it running. They are assured they are paying operating costs, which are significantly lower than most because it doesn&amp;#8217;t include paying for human resources! Volunteers might need to meddle with settings, but otherwise, the coders are in control and the community accepts or denies changes made by whoever wants them.&lt;/p&gt;

&lt;p&gt;So if this is interesting, read the &lt;a href='http://poss.gliderlab.com/'&gt;full essay I wrote up on the wiki&lt;/a&gt;. It&amp;#8217;s been my intention to prototype and validate this model with many of my projects.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Why minimalist software wins at workflow</title>
   <link href="http://progrium.com/blog/2009/06/26/why-minimalist-software-wins-at-workflow"/>
   <updated>2009-06-26T00:00:00-07:00</updated>
   <id>http://progrium.com/blog/2009/06/26/why-minimalist-software-wins-at-workflow</id>
   <content type="html">&lt;p&gt;Recently I&amp;#8217;ve been evaluating software to help support agile/scrum development on our team, and ideally to roll into our NASA Code product for others to use. We&amp;#8217;re already married to &lt;a href='http://trac.edgewall.org/'&gt;Trac&lt;/a&gt;, so we&amp;#8217;ve been playing with &lt;a href='http://www.agile42.com/cms/pages/agilo/'&gt;Agilo&lt;/a&gt; and are looking at some of the other agile plugins for Trac. Unfortunately they&amp;#8217;re all so heavyweight, despite some that claim not to be.&lt;/p&gt;

&lt;p&gt;I came back to a realization I&amp;#8217;m sure a lot of us have had: most software sucks. Especially software that&amp;#8217;s intended to augment some real-life process. When asking friend/colleague &lt;a href='http://timothyfitz.com'&gt;Timothy Fitz&lt;/a&gt; about recommendations on agile tools, he said: &amp;#8220;A board and post-its. Seriously.&amp;#8221;&lt;/p&gt;

&lt;p&gt;This is part of the reason most enterprise software sucks so terribly. Enterprise is about lots of real-life process and workflow, and given that process augmentation software even in small doses generally sucks, large amounts of it will suck exponentially.&lt;/p&gt;

&lt;p&gt;A lot of us have learned that less software is more effective. One major attraction of Trac was their goal of staying out of the way through minimalism. The trick with minimalism, in general, is knowing what&amp;#8217;s actually important; the essence of the message or design. This is a big part of my design process. Asking, &amp;#8220;How can I fold these requirements into fewer features and UI?&amp;#8221; instead of directly implementing a feature for every requirement.&lt;/p&gt;

&lt;p&gt;The other thing about minimalism is that, like abstraction (another form of compression), everything you leave in the design makes such a huge difference. In programming, when you make abstractions, you&amp;#8217;re deciding what you can assume. This means abstractions can go in different directions depending on the assumption requirements of what&amp;#8217;s going to use the abstraction. The risk with minimalist software is that a simple design choice can drastically change the direction of the abstraction and make or break whether the software fits your needs.&lt;/p&gt;

&lt;p&gt;Luckily, minimalism buys you a sort of abstraction that can enable projection. By this I mean that users can project their actual process and workflow onto the software. If it doesn&amp;#8217;t have features that impose a particular process, users are free to do what works for them. This is why wikis are so powerful.&lt;/p&gt;

&lt;p&gt;Coming back to Timothy&amp;#8217;s &amp;#8220;a board and post-its&amp;#8221; remark, why do you even need software? If you can do it without software, why would you want to bring software in to slow things down?&lt;/p&gt;

&lt;p&gt;Software does have a couple strengths. First, it encodes process in way that means you can automate parts of it. Nobody has to worry about manually typesetting when using a word processor. Second, it persists and organizes information that would normally be lost in handwritten notes, or worse, somebody&amp;#8217;s head. The trick is getting these advantages without getting in the way.&lt;/p&gt;

&lt;p&gt;A naive approach to software design is thinking that perfectly modeling a system, such as your development process, is the way to good software. I used to think this. It sounds great because then you can programmatically reason about every aspect of the system. But in the real-world, no two systems are exactly alike. In fact, a given system can change quite a bit in its lifetime. So there&amp;#8217;s really no point to modeling systems with that kind of precision.&lt;/p&gt;

&lt;p&gt;However, I&amp;#8217;m seeing a lot of this in agile/scrum software. Requirements have stories, stories have tasks, organized into iterations and releases. CRUD for every noun mentioned in scrum. This on top of abstractions in a direction different than we need. Numbers where it doesn&amp;#8217;t really matter. Nice pie chart breakdowns we&amp;#8217;ll rarely use. Top it off with horrible UI, since with all these features there isn&amp;#8217;t time to make them easy to use.&lt;/p&gt;

&lt;p&gt;Honestly, &lt;a href='http://www.pivotaltracker.com/'&gt;Pivotal Tracker&lt;/a&gt; seems to have the best abstraction of agile. It folds requirements, stories and tasks into just stories. It automatically and dynamically creates iterations and calculates velocity. It keeps you on a single page, keeping you focused on what&amp;#8217;s important.&lt;/p&gt;

&lt;p&gt;Unfortunately, we can&amp;#8217;t use Pivotal Tracker since we&amp;#8217;d need it on our servers and the licensing they offered doesn&amp;#8217;t scale if we want to essentially give it away as part of NASA Code. It&amp;#8217;s likely I&amp;#8217;ll want to just start nudging Trac in the right direction using Pivotal Tracker as a model reference, pulling together code from Agilo and other plugins. If there&amp;#8217;s one thing that complements minimalist design, it&amp;#8217;s an extension architecture, and Trac has an excellent plugin system.&lt;/p&gt;

&lt;p&gt;Anyway, as far as augmenting process and workflow, I&amp;#8217;ve always liked the idea of starting with a wiki and lazily formalizing the process into custom software as needed. As long as you can keep it under control, mind your requirement abstractions, and avoid writing too much software.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Oh no! Hackers!</title>
   <link href="http://progrium.com/blog/2009/06/17/oh-no-hackers"/>
   <updated>2009-06-17T00:00:00-07:00</updated>
   <id>http://progrium.com/blog/2009/06/17/oh-no-hackers</id>
   <content type="html">&lt;p&gt;That&amp;#8217;s right. Hide your floppies and cover your Ethernet ports. Virus-laden hackers are coming to take over your computer, steal your passwords, and do terrible things! Like hack your MySpace! Oh noes!&lt;/p&gt;

&lt;p&gt;I guess I&amp;#8217;m getting over the fact that we probably won&amp;#8217;t be able to undo the damage done with the public&amp;#8217;s perception of what a &amp;#8220;hacker&amp;#8221; is. Perhaps, though, we can overload it to the point of ambiguity, so there&amp;#8217;s at least some question of context whether it&amp;#8217;s the good kind or the bad kind.&lt;/p&gt;

&lt;p&gt;The problem is that positive connotations aren&amp;#8217;t enough. The people that would venture to understand &amp;#8220;hackers&amp;#8221; the slightest bit more than what they hear in the headlines are going to pretty quickly find the &amp;#8220;good hackers&amp;#8221; &amp;#8230; they&amp;#8217;re white hats, right?&lt;/p&gt;

&lt;p&gt;The other day I was questioned by somebody (that should know better) if I hacked somebody&amp;#8217;s website that was recently compromised. Seriously? My response was &amp;#8220;I barely have enough time to do important things, let alone something that would be a waste of my time.&amp;#8221;&lt;/p&gt;

&lt;p&gt;I self-identify as a hacker. I invite my friends over to &amp;#8220;hack.&amp;#8221; I started a party for &amp;#8220;hackers and thinkers&amp;#8221; (a very intentional choice of words). I&amp;#8217;m co-founding a community center called Hacker Dojo. What are we doing at all these functions? Building and learning.&lt;/p&gt;

&lt;p&gt;We use the term perhaps too liberally, but always implying tribute to the true hackers that, as Steven Levy put it, &amp;#8220;regard computing as the most important thing in the world.&amp;#8221;&lt;/p&gt;

&lt;p&gt;These people push the envelope of what&amp;#8217;s possible through hands-on exploration, driven by relentless curiosity and a desire to challenge the status quo. Steve Wozniak, Lee Felsenstein, Linus Torvalds, Tim Berners-Lee, John Carmack&amp;#8230;&lt;/p&gt;

&lt;p&gt;Hell, there&amp;#8217;s something big behind this idea, why stop at computing? Buckminster Fuller, Nikola Tesla, Richard Feynman, Alfred Kinsey, Ben Franklin&amp;#8230;&lt;/p&gt;

&lt;p&gt;Perhaps we&amp;#8217;re generalizing too far. Perhaps we&amp;#8217;re rendering &amp;#8220;hacker&amp;#8221; meaningless. Or are we giving it more meaning? Getting down to its essence. I wouldn&amp;#8217;t be defending this idea so strongly if I didn&amp;#8217;t think it had some great significance to humanity.&lt;/p&gt;

&lt;p&gt;What upsets me is that many who would identify as hackers in this sense seem to be afraid to claim it. Most likely in fear of confusing the layman that has the media&amp;#8217;s myopic view of hackers. You&amp;#8217;ve never heard of the canonical conference for real hackers. No, it&amp;#8217;s not DefCon. (Just get up and leave.) It&amp;#8217;s a conference called Hackers. You&amp;#8217;ve never heard of it because they keep it secret!&lt;/p&gt;

&lt;p&gt;This conference was started to gather everybody together that was mentioned in Steven Levy&amp;#8217;s book &lt;a href='http://www.amazon.com/Hackers-Computer-Revolution-Steven-Levy/dp/0141000511/ref=sr_1_2?ie=UTF8&amp;amp;s=books&amp;amp;qid=1245307316&amp;amp;sr=8-2'&gt;Hackers: Heroes of the Computer Revolution&lt;/a&gt; (one of the last good publication on hackers, and it came out in 1984!). This conference holds all the values of true hackerism and it&amp;#8217;s been happening for 25 years. But they won&amp;#8217;t promote it! It goes by a fake name and even has all mentions of &amp;#8220;hacker&amp;#8221; on their website replaced with an image so it won&amp;#8217;t be indexed. Seriously??&lt;/p&gt;

&lt;p&gt;Trying to supplant public perception of hackers by just saying they&amp;#8217;re something different and providing a better name nobody uses (&amp;#8220;crackers&amp;#8221;) is not going to work. It hasn&amp;#8217;t worked. They need something to replace those visions of crackers with. We need tangible examples and stories. We need heroes. Heroes willing to wear the title.&lt;/p&gt;

&lt;p&gt;Luckily, we have a new generation of hackers. One that has started a global movement called &lt;a href='http://hackerspaces.org/'&gt;hackerspaces&lt;/a&gt;, probably one of the biggest things for hackers in years. Our local hackerscene fostered by Silicon Valley culture and events like &lt;a href='http://devhouse.org'&gt;SuperHappyDevHouse&lt;/a&gt; have led to a hackerspace we hope will have a big impact. One that proudly wears the name hacker: &lt;a href='http://hackerdojo.com'&gt;Hacker Dojo&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Web hooks to revolutionize the web</title>
   <link href="http://progrium.com/blog/2007/05/03/web-hooks-to-revolutionize-the-web"/>
   <updated>2007-05-03T00:00:00-07:00</updated>
   <id>http://progrium.com/blog/2007/05/03/web-hooks-to-revolutionize-the-web</id>
   <content type="html">&lt;p&gt;There once was a command line. It was a powerful thing. Not only could you navigate your filesystem and launch applications, but you could program shell scripts to automate tasks and make convenient shortcuts. It also had pipes.&lt;/p&gt;

&lt;p&gt;One of the major sources of power on the Unix command line is the simple construct of input and output. A program can read from &lt;code&gt;STDIN&lt;/code&gt; and can write to &lt;code&gt;STDOUT&lt;/code&gt;, and you have a fair amount of control over re-routing them however you want. Most commonly this is used to chain commands together, &amp;#8220;piping&amp;#8221; the output of one to the input of another.&lt;/p&gt;

&lt;p&gt;This is infrastructure. Infrastructure that encourages simple, independent programs to be made almost exclusively for the purpose of chaining with other commands. These are commands like cat, grep, uniq, wc, sort, nc, and others. Many of them are useless by themselves, but together they achieve more than the sum of their parts. Especially when combined with larger programs. This is made possible from the simple idea of input and output.&lt;/p&gt;

&lt;p&gt;This idea was implemented on Unix in 1977. Twenty years later, Jon Udell expressed a vision of web sites as data sources that could be reused and remixed, and a new programming paradigm that took the whole Internet as its platform. This lead Tim OReilly to ask in 2000:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the equivalent of the pipe in the age of the web?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There seems to be a resounding consensus that the answer is feeds. The name sounds very promising, it sort of make you imagine feeds like in the telecom world. Data coming directly to you. But this is misleading because feeds aren&amp;#8217;t about data coming to you. They&amp;#8217;re about you getting that data yourself. A lot. Over and over again. This is polling.&lt;/p&gt;

&lt;p&gt;If you could avoid polling, you probably would. If you&amp;#8217;re building an app that works with a feed, you have to write a polling system. This means messing with the often-hard-to-debug crontab or writing and managing a full-fledged daemon. Then you have to worry about caching and parsing. Feeds seem to be made for the browser because the browser does a lot of this work for you, but it&amp;#8217;s a different story if you&amp;#8217;re constantly polling feeds or APIs in the backend. Then it almost becomes too much work to do anything simple with feeds and APIs. If you want to use feeds for real-time notification, have fun setting that up.&lt;/p&gt;

&lt;p&gt;I also think there&amp;#8217;s a problem with the command line metaphor in the first place. The web is not linear. Web apps aren&amp;#8217;t synchronous. A better metaphor would be a daemon process. How do they communicate? IPC? Sockets? Queues?&lt;/p&gt;
&lt;div class='alert alert-info'&gt;
Note from 2012: Remember, this was 2007. Web developers didn't have Node.js or EventMachine, and mainstream developers didn't understand queuing systems or async operations. Often all they had was Apache and PHP.
&lt;/div&gt;
&lt;p&gt;Unfortunately, web stacks are stateless request processors, so you can&amp;#8217;t really use sockets. You could use Amazon SQS or some other queuing system, but queues often just move the polling to somewhere else. What we need is something simple, stateless, and ideally real-time. We need to push.&lt;/p&gt;

&lt;p&gt;This is where web hooks come in. Web hooks are essentially user defined callbacks made with HTTP POST. To support web hooks, you allow the user to specify a URL where your application will post to and on what events. Now your application is pushing data out wherever your users want. It&amp;#8217;s pretty much like re-routing &lt;code&gt;STDOUT&lt;/code&gt; on the command line.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;re already sort of doing this with pingbacks on blogs. However, the difference with web hooks is that the payload is arbitrary event data and the target URLs are user web scripts or handlers. From there, the users can do whatever they want.&lt;/p&gt;

&lt;p&gt;The idea here is to create new infrastructure. New opportunities. I&amp;#8217;ve been thinking a lot about the possibilities of a web hook enabled web, and it makes me really excited. Because it&amp;#8217;s such open ended infrastructure, I&amp;#8217;m sure the possibilities extend well beyond what I can think of. Especially when combined with our growing ecosystem of APIs and feeds.&lt;/p&gt;

&lt;p&gt;Web hooks are easy to implement for application developers. You just implement a UI or API to let the user specify target URLs, and then you&amp;#8217;re just making a standard HTTP POST on events. This is a fairly trivial operation in most environments, since you already do this to use other web APIs.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s be clear. When I talk about the user of web hooks, it&amp;#8217;s often a power user or developer. But being based on HTTP POST makes it very accessible for mainstream web developers. They already know how to work with POST variables. And PHP hosting is widely available and practically free. I think PHP would become a popular language for writing hook scripts.&lt;/p&gt;

&lt;p&gt;Just think about it. Writing all the boilerplate polling and parsing infrastructure just to use a feed? Or writing a little PHP script that has all the incoming data in &lt;code&gt;$_POST&lt;/code&gt;. Plus it&amp;#8217;s real-time. Which has a lower barrier to entry when somebody gets a bright idea on how to use all this data we&amp;#8217;ve &amp;#8220;opened up&amp;#8221; on the programmable web?&lt;/p&gt;

&lt;p&gt;The Unix pipe is simple because it&amp;#8217;s about linear input and output of text streams. The web is very different. At a high level, I think web hooks achieve the same simplicity but more appropriately for the web. When coupled with our existing ecosystem of feeds and APIs, we&amp;#8217;ll have an even more powerful platform than what pipes gave Unix.&lt;/p&gt;</content>
 </entry>
 
 
</feed>
